
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.1
 * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
 */
Prisma.prismaVersion = {
  client: "3.11.1",
  engine: "1a2506facaf1a4727b7c26850735e88ec779dee9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.EmployeeScalarFieldEnum = makeEnum({
  id: 'id',
  password: 'password',
  email: 'email',
  name: 'name',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  empType: 'empType',
  jobType: 'jobType',
  experience: 'experience',
  designation: 'designation',
  profilePicture: 'profilePicture',
  profilePicKey: 'profilePicKey'
});

exports.Prisma.CandidateScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  city: 'city',
  country: 'country',
  phone: 'phone',
  name: 'name',
  social: 'social',
  profilePicture: 'profilePicture',
  profilePicKey: 'profilePicKey',
  resume: 'resume',
  resumeKey: 'resumeKey',
  source: 'source',
  currJobTitle: 'currJobTitle',
  qualification: 'qualification',
  expectedSalary: 'expectedSalary',
  expectedSalaryUnit: 'expectedSalaryUnit',
  currentSalary: 'currentSalary',
  currentSalaryUnit: 'currentSalaryUnit',
  experience: 'experience',
  info: 'info',
  website: 'website'
});

exports.Prisma.SkillsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.JobScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  experienceStartRng: 'experienceStartRng',
  experienceEndRng: 'experienceEndRng',
  salaryStartRng: 'salaryStartRng',
  salaryEndRng: 'salaryEndRng',
  createdAt: 'createdAt',
  closedAt: 'closedAt',
  assignedTo: 'assignedTo',
  status: 'status',
  description: 'description',
  opening: 'opening',
  filled: 'filled',
  active: 'active',
  contacting: 'contacting',
  archived: 'archived',
  department: 'department',
  jobReq: 'jobReq',
  jobRes: 'jobRes',
  city: 'city',
  keywords: 'keywords',
  type: 'type'
});

exports.Prisma.NewsletterScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email'
});

exports.Prisma.InterviewRoundScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  interviewerId: 'interviewerId',
  candidateId: 'candidateId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  url: 'url',
  feedback: 'feedback'
});

exports.Prisma.CandidateSkillsScalarFieldEnum = makeEnum({
  candidateId: 'candidateId',
  skillId: 'skillId',
  value: 'value'
});

exports.Prisma.EmployeeSkillsScalarFieldEnum = makeEnum({
  employeeId: 'employeeId',
  skillId: 'skillId',
  value: 'value'
});

exports.Prisma.CandidateSocialScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  candidateId: 'candidateId',
  url: 'url'
});

exports.Prisma.CandidateForJobsScalarFieldEnum = makeEnum({
  candidateId: 'candidateId',
  jobId: 'jobId',
  stage: 'stage',
  preOnboarding: 'preOnboarding',
  dateApplied: 'dateApplied'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = makeEnum({
  password: 'password',
  email: 'email',
  name: 'name',
  empType: 'empType',
  jobType: 'jobType',
  designation: 'designation',
  profilePicture: 'profilePicture',
  profilePicKey: 'profilePicKey'
});

exports.Prisma.CandidateOrderByRelevanceFieldEnum = makeEnum({
  email: 'email',
  city: 'city',
  country: 'country',
  name: 'name',
  social: 'social',
  profilePicture: 'profilePicture',
  profilePicKey: 'profilePicKey',
  resume: 'resume',
  resumeKey: 'resumeKey',
  source: 'source',
  currJobTitle: 'currJobTitle',
  qualification: 'qualification',
  expectedSalaryUnit: 'expectedSalaryUnit',
  currentSalaryUnit: 'currentSalaryUnit',
  info: 'info',
  website: 'website'
});

exports.Prisma.SkillsOrderByRelevanceFieldEnum = makeEnum({
  name: 'name'
});

exports.Prisma.JobOrderByRelevanceFieldEnum = makeEnum({
  title: 'title',
  status: 'status',
  description: 'description',
  department: 'department',
  jobReq: 'jobReq',
  jobRes: 'jobRes',
  city: 'city',
  keywords: 'keywords',
  type: 'type'
});

exports.Prisma.NewsletterOrderByRelevanceFieldEnum = makeEnum({
  email: 'email'
});

exports.Prisma.InterviewRoundOrderByRelevanceFieldEnum = makeEnum({
  title: 'title',
  url: 'url',
  feedback: 'feedback'
});

exports.Prisma.CandidateSocialOrderByRelevanceFieldEnum = makeEnum({
  name: 'name',
  url: 'url'
});

exports.Prisma.CandidateForJobsOrderByRelevanceFieldEnum = makeEnum({
  stage: 'stage',
  preOnboarding: 'preOnboarding'
});


exports.Prisma.ModelName = makeEnum({
  Employee: 'Employee',
  Candidate: 'Candidate',
  Skills: 'Skills',
  Job: 'Job',
  Newsletter: 'Newsletter',
  InterviewRound: 'InterviewRound',
  CandidateSkills: 'CandidateSkills',
  EmployeeSkills: 'EmployeeSkills',
  CandidateSocial: 'CandidateSocial',
  CandidateForJobs: 'CandidateForJobs'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)


/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Employee
 * 
 */
export type Employee = {
  id: number
  password: string
  email: string
  name: string
  phone: bigint | null
  createdAt: Date
  updatedAt: Date
  empType: string
  jobType: string | null
  experience: number | null
  designation: string | null
  profilePicture: string | null
  profilePicKey: string | null
}

/**
 * Model Candidate
 * 
 */
export type Candidate = {
  id: number
  email: string
  createdAt: Date
  updatedAt: Date
  city: string | null
  country: string | null
  phone: bigint | null
  name: string
  social: string | null
  profilePicture: string | null
  profilePicKey: string | null
  resume: string | null
  resumeKey: string | null
  source: string | null
  currJobTitle: string | null
  qualification: string | null
  expectedSalary: number | null
  expectedSalaryUnit: string | null
  currentSalary: number | null
  currentSalaryUnit: string | null
  experience: number | null
  info: string | null
  website: string | null
}

/**
 * Model Skills
 * 
 */
export type Skills = {
  id: number
  name: string
}

/**
 * Model Job
 * 
 */
export type Job = {
  id: number
  title: string
  experienceStartRng: number
  experienceEndRng: number
  salaryStartRng: number
  salaryEndRng: number
  createdAt: Date
  closedAt: Date | null
  assignedTo: number
  status: string
  description: string
  opening: number
  filled: number
  active: number
  contacting: number
  archived: number
  department: string
  jobReq: string[]
  jobRes: string[]
  city: string
  keywords: string[]
  type: string[]
}

/**
 * Model Newsletter
 * 
 */
export type Newsletter = {
  id: number
  email: string
}

/**
 * Model InterviewRound
 * 
 */
export type InterviewRound = {
  id: number
  title: string
  interviewerId: number
  candidateId: number
  date: Date
  startTime: Date
  endTime: Date
  url: string
  feedback: string | null
}

/**
 * Model CandidateSkills
 * 
 */
export type CandidateSkills = {
  candidateId: number
  skillId: number
  value: number
}

/**
 * Model EmployeeSkills
 * 
 */
export type EmployeeSkills = {
  employeeId: number
  skillId: number
  value: number | null
}

/**
 * Model CandidateSocial
 * 
 */
export type CandidateSocial = {
  id: number
  name: string
  candidateId: number
  url: string
}

/**
 * Model CandidateForJobs
 * 
 */
export type CandidateForJobs = {
  candidateId: number
  jobId: number
  stage: string
  preOnboarding: string | null
  dateApplied: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<GlobalReject>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<GlobalReject>;

  /**
   * `prisma.skills`: Exposes CRUD operations for the **Skills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skills.findMany()
    * ```
    */
  get skills(): Prisma.SkillsDelegate<GlobalReject>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<GlobalReject>;

  /**
   * `prisma.newsletter`: Exposes CRUD operations for the **Newsletter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newsletters
    * const newsletters = await prisma.newsletter.findMany()
    * ```
    */
  get newsletter(): Prisma.NewsletterDelegate<GlobalReject>;

  /**
   * `prisma.interviewRound`: Exposes CRUD operations for the **InterviewRound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InterviewRounds
    * const interviewRounds = await prisma.interviewRound.findMany()
    * ```
    */
  get interviewRound(): Prisma.InterviewRoundDelegate<GlobalReject>;

  /**
   * `prisma.candidateSkills`: Exposes CRUD operations for the **CandidateSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateSkills
    * const candidateSkills = await prisma.candidateSkills.findMany()
    * ```
    */
  get candidateSkills(): Prisma.CandidateSkillsDelegate<GlobalReject>;

  /**
   * `prisma.employeeSkills`: Exposes CRUD operations for the **EmployeeSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeSkills
    * const employeeSkills = await prisma.employeeSkills.findMany()
    * ```
    */
  get employeeSkills(): Prisma.EmployeeSkillsDelegate<GlobalReject>;

  /**
   * `prisma.candidateSocial`: Exposes CRUD operations for the **CandidateSocial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateSocials
    * const candidateSocials = await prisma.candidateSocial.findMany()
    * ```
    */
  get candidateSocial(): Prisma.CandidateSocialDelegate<GlobalReject>;

  /**
   * `prisma.candidateForJobs`: Exposes CRUD operations for the **CandidateForJobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateForJobs
    * const candidateForJobs = await prisma.candidateForJobs.findMany()
    * ```
    */
  get candidateForJobs(): Prisma.CandidateForJobsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.1
   * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Employee: 'Employee',
    Candidate: 'Candidate',
    Skills: 'Skills',
    Job: 'Job',
    Newsletter: 'Newsletter',
    InterviewRound: 'InterviewRound',
    CandidateSkills: 'CandidateSkills',
    EmployeeSkills: 'EmployeeSkills',
    CandidateSocial: 'CandidateSocial',
    CandidateForJobs: 'CandidateForJobs'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */


  export type EmployeeCountOutputType = {
    jobs: number
    skills: number
    interviews: number
  }

  export type EmployeeCountOutputTypeSelect = {
    jobs?: boolean
    skills?: boolean
    interviews?: boolean
  }

  export type EmployeeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EmployeeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EmployeeCountOutputType
    : S extends undefined
    ? never
    : S extends EmployeeCountOutputTypeArgs
    ?'include' extends U
    ? EmployeeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EmployeeCountOutputType ? EmployeeCountOutputType[P] : never
  } 
    : EmployeeCountOutputType
  : EmployeeCountOutputType




  // Custom InputTypes

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     * 
    **/
    select?: EmployeeCountOutputTypeSelect | null
  }



  /**
   * Count Type CandidateCountOutputType
   */


  export type CandidateCountOutputType = {
    appliedAt: number
    skills: number
    socials: number
    interview: number
  }

  export type CandidateCountOutputTypeSelect = {
    appliedAt?: boolean
    skills?: boolean
    socials?: boolean
    interview?: boolean
  }

  export type CandidateCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CandidateCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CandidateCountOutputType
    : S extends undefined
    ? never
    : S extends CandidateCountOutputTypeArgs
    ?'include' extends U
    ? CandidateCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CandidateCountOutputType ? CandidateCountOutputType[P] : never
  } 
    : CandidateCountOutputType
  : CandidateCountOutputType




  // Custom InputTypes

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     * 
    **/
    select?: CandidateCountOutputTypeSelect | null
  }



  /**
   * Count Type SkillsCountOutputType
   */


  export type SkillsCountOutputType = {
    candidates: number
    employee: number
  }

  export type SkillsCountOutputTypeSelect = {
    candidates?: boolean
    employee?: boolean
  }

  export type SkillsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SkillsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SkillsCountOutputType
    : S extends undefined
    ? never
    : S extends SkillsCountOutputTypeArgs
    ?'include' extends U
    ? SkillsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SkillsCountOutputType ? SkillsCountOutputType[P] : never
  } 
    : SkillsCountOutputType
  : SkillsCountOutputType




  // Custom InputTypes

  /**
   * SkillsCountOutputType without action
   */
  export type SkillsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SkillsCountOutputType
     * 
    **/
    select?: SkillsCountOutputTypeSelect | null
  }



  /**
   * Count Type JobCountOutputType
   */


  export type JobCountOutputType = {
    appliedBy: number
  }

  export type JobCountOutputTypeSelect = {
    appliedBy?: boolean
  }

  export type JobCountOutputTypeGetPayload<
    S extends boolean | null | undefined | JobCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? JobCountOutputType
    : S extends undefined
    ? never
    : S extends JobCountOutputTypeArgs
    ?'include' extends U
    ? JobCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof JobCountOutputType ? JobCountOutputType[P] : never
  } 
    : JobCountOutputType
  : JobCountOutputType




  // Custom InputTypes

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     * 
    **/
    select?: JobCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Employee
   */


  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    phone: number | null
    experience: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    phone: bigint | null
    experience: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    password: string | null
    email: string | null
    name: string | null
    phone: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
    empType: string | null
    jobType: string | null
    experience: number | null
    designation: string | null
    profilePicture: string | null
    profilePicKey: string | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    password: string | null
    email: string | null
    name: string | null
    phone: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
    empType: string | null
    jobType: string | null
    experience: number | null
    designation: string | null
    profilePicture: string | null
    profilePicKey: string | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    password: number
    email: number
    name: number
    phone: number
    createdAt: number
    updatedAt: number
    empType: number
    jobType: number
    experience: number
    designation: number
    profilePicture: number
    profilePicKey: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    phone?: true
    experience?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    phone?: true
    experience?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    password?: true
    email?: true
    name?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    empType?: true
    jobType?: true
    experience?: true
    designation?: true
    profilePicture?: true
    profilePicKey?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    password?: true
    email?: true
    name?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    empType?: true
    jobType?: true
    experience?: true
    designation?: true
    profilePicture?: true
    profilePicKey?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    password?: true
    email?: true
    name?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    empType?: true
    jobType?: true
    experience?: true
    designation?: true
    profilePicture?: true
    profilePicKey?: true
    _all?: true
  }

  export type EmployeeAggregateArgs = {
    /**
     * Filter which Employee to aggregate.
     * 
    **/
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     * 
    **/
    orderBy?: Enumerable<EmployeeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs = {
    where?: EmployeeWhereInput
    orderBy?: Enumerable<EmployeeOrderByWithAggregationInput>
    by: Array<EmployeeScalarFieldEnum>
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }


  export type EmployeeGroupByOutputType = {
    id: number
    password: string
    email: string
    name: string
    phone: bigint | null
    createdAt: Date
    updatedAt: Date
    empType: string
    jobType: string | null
    experience: number | null
    designation: string | null
    profilePicture: string | null
    profilePicKey: string | null
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect = {
    id?: boolean
    password?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    empType?: boolean
    jobType?: boolean
    experience?: boolean
    designation?: boolean
    profilePicture?: boolean
    profilePicKey?: boolean
    jobs?: boolean | JobFindManyArgs
    skills?: boolean | EmployeeSkillsFindManyArgs
    interviews?: boolean | InterviewRoundFindManyArgs
    _count?: boolean | EmployeeCountOutputTypeArgs
  }

  export type EmployeeInclude = {
    jobs?: boolean | JobFindManyArgs
    skills?: boolean | EmployeeSkillsFindManyArgs
    interviews?: boolean | InterviewRoundFindManyArgs
    _count?: boolean | EmployeeCountOutputTypeArgs
  }

  export type EmployeeGetPayload<
    S extends boolean | null | undefined | EmployeeArgs,
    U = keyof S
      > = S extends true
        ? Employee
    : S extends undefined
    ? never
    : S extends EmployeeArgs | EmployeeFindManyArgs
    ?'include' extends U
    ? Employee  & {
    [P in TrueKeys<S['include']>]:
        P extends 'jobs' ? Array < JobGetPayload<S['include'][P]>>  :
        P extends 'skills' ? Array < EmployeeSkillsGetPayload<S['include'][P]>>  :
        P extends 'interviews' ? Array < InterviewRoundGetPayload<S['include'][P]>>  :
        P extends '_count' ? EmployeeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'jobs' ? Array < JobGetPayload<S['select'][P]>>  :
        P extends 'skills' ? Array < EmployeeSkillsGetPayload<S['select'][P]>>  :
        P extends 'interviews' ? Array < InterviewRoundGetPayload<S['select'][P]>>  :
        P extends '_count' ? EmployeeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Employee ? Employee[P] : never
  } 
    : Employee
  : Employee


  type EmployeeCountArgs = Merge<
    Omit<EmployeeFindManyArgs, 'select' | 'include'> & {
      select?: EmployeeCountAggregateInputType | true
    }
  >

  export interface EmployeeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmployeeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Employee'> extends True ? CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>> : CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmployeeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Employee'> extends True ? CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>> : CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmployeeFindManyArgs>(
      args?: SelectSubset<T, EmployeeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Employee>>, PrismaPromise<Array<EmployeeGetPayload<T>>>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs>(
      args: SelectSubset<T, EmployeeCreateArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Create many Employees.
     *     @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     *     @example
     *     // Create many Employees
     *     const employee = await prisma.employee.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmployeeCreateManyArgs>(
      args?: SelectSubset<T, EmployeeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs>(
      args: SelectSubset<T, EmployeeDeleteArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs>(
      args: SelectSubset<T, EmployeeUpdateArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs>(
      args?: SelectSubset<T, EmployeeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs>(
      args: SelectSubset<T, EmployeeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs>(
      args: SelectSubset<T, EmployeeUpsertArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmployeeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    jobs<T extends JobFindManyArgs = {}>(args?: Subset<T, JobFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>;

    skills<T extends EmployeeSkillsFindManyArgs = {}>(args?: Subset<T, EmployeeSkillsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EmployeeSkills>>, PrismaPromise<Array<EmployeeSkillsGetPayload<T>>>>;

    interviews<T extends InterviewRoundFindManyArgs = {}>(args?: Subset<T, InterviewRoundFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InterviewRound>>, PrismaPromise<Array<InterviewRoundGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * Throw an Error if a Employee can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Employee to fetch.
     * 
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * Throw an Error if a Employee can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Employee to fetch.
     * 
    **/
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     * 
    **/
    orderBy?: Enumerable<EmployeeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     * 
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     * 
    **/
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * Filter, which Employees to fetch.
     * 
    **/
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     * 
    **/
    orderBy?: Enumerable<EmployeeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     * 
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee create
   */
  export type EmployeeCreateArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * The data needed to create a Employee.
     * 
    **/
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }


  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs = {
    /**
     * The data used to create many Employees.
     * 
    **/
    data: Enumerable<EmployeeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Employee update
   */
  export type EmployeeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * The data needed to update a Employee.
     * 
    **/
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     * 
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs = {
    /**
     * The data used to update Employees.
     * 
    **/
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     * 
    **/
    where?: EmployeeWhereInput
  }


  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * The filter to search for the Employee to update in case it exists.
     * 
    **/
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     * 
    **/
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }


  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
    /**
     * Filter which Employee to delete.
     * 
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs = {
    /**
     * Filter which Employees to delete
     * 
    **/
    where?: EmployeeWhereInput
  }


  /**
   * Employee without action
   */
  export type EmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
     * 
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeInclude | null
  }



  /**
   * Model Candidate
   */


  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateAvgAggregateOutputType = {
    id: number | null
    phone: number | null
    expectedSalary: number | null
    currentSalary: number | null
    experience: number | null
  }

  export type CandidateSumAggregateOutputType = {
    id: number | null
    phone: bigint | null
    expectedSalary: number | null
    currentSalary: number | null
    experience: number | null
  }

  export type CandidateMinAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    city: string | null
    country: string | null
    phone: bigint | null
    name: string | null
    social: string | null
    profilePicture: string | null
    profilePicKey: string | null
    resume: string | null
    resumeKey: string | null
    source: string | null
    currJobTitle: string | null
    qualification: string | null
    expectedSalary: number | null
    expectedSalaryUnit: string | null
    currentSalary: number | null
    currentSalaryUnit: string | null
    experience: number | null
    info: string | null
    website: string | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    city: string | null
    country: string | null
    phone: bigint | null
    name: string | null
    social: string | null
    profilePicture: string | null
    profilePicKey: string | null
    resume: string | null
    resumeKey: string | null
    source: string | null
    currJobTitle: string | null
    qualification: string | null
    expectedSalary: number | null
    expectedSalaryUnit: string | null
    currentSalary: number | null
    currentSalaryUnit: string | null
    experience: number | null
    info: string | null
    website: string | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    email: number
    createdAt: number
    updatedAt: number
    city: number
    country: number
    phone: number
    name: number
    social: number
    profilePicture: number
    profilePicKey: number
    resume: number
    resumeKey: number
    source: number
    currJobTitle: number
    qualification: number
    expectedSalary: number
    expectedSalaryUnit: number
    currentSalary: number
    currentSalaryUnit: number
    experience: number
    info: number
    website: number
    _all: number
  }


  export type CandidateAvgAggregateInputType = {
    id?: true
    phone?: true
    expectedSalary?: true
    currentSalary?: true
    experience?: true
  }

  export type CandidateSumAggregateInputType = {
    id?: true
    phone?: true
    expectedSalary?: true
    currentSalary?: true
    experience?: true
  }

  export type CandidateMinAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    city?: true
    country?: true
    phone?: true
    name?: true
    social?: true
    profilePicture?: true
    profilePicKey?: true
    resume?: true
    resumeKey?: true
    source?: true
    currJobTitle?: true
    qualification?: true
    expectedSalary?: true
    expectedSalaryUnit?: true
    currentSalary?: true
    currentSalaryUnit?: true
    experience?: true
    info?: true
    website?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    city?: true
    country?: true
    phone?: true
    name?: true
    social?: true
    profilePicture?: true
    profilePicKey?: true
    resume?: true
    resumeKey?: true
    source?: true
    currJobTitle?: true
    qualification?: true
    expectedSalary?: true
    expectedSalaryUnit?: true
    currentSalary?: true
    currentSalaryUnit?: true
    experience?: true
    info?: true
    website?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    city?: true
    country?: true
    phone?: true
    name?: true
    social?: true
    profilePicture?: true
    profilePicKey?: true
    resume?: true
    resumeKey?: true
    source?: true
    currJobTitle?: true
    qualification?: true
    expectedSalary?: true
    expectedSalaryUnit?: true
    currentSalary?: true
    currentSalaryUnit?: true
    experience?: true
    info?: true
    website?: true
    _all?: true
  }

  export type CandidateAggregateArgs = {
    /**
     * Filter which Candidate to aggregate.
     * 
    **/
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs = {
    where?: CandidateWhereInput
    orderBy?: Enumerable<CandidateOrderByWithAggregationInput>
    by: Array<CandidateScalarFieldEnum>
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _avg?: CandidateAvgAggregateInputType
    _sum?: CandidateSumAggregateInputType
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }


  export type CandidateGroupByOutputType = {
    id: number
    email: string
    createdAt: Date
    updatedAt: Date
    city: string | null
    country: string | null
    phone: bigint | null
    name: string
    social: string | null
    profilePicture: string | null
    profilePicKey: string | null
    resume: string | null
    resumeKey: string | null
    source: string | null
    currJobTitle: string | null
    qualification: string | null
    expectedSalary: number | null
    expectedSalaryUnit: string | null
    currentSalary: number | null
    currentSalaryUnit: string | null
    experience: number | null
    info: string | null
    website: string | null
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect = {
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    city?: boolean
    country?: boolean
    phone?: boolean
    name?: boolean
    social?: boolean
    profilePicture?: boolean
    profilePicKey?: boolean
    resume?: boolean
    resumeKey?: boolean
    source?: boolean
    currJobTitle?: boolean
    qualification?: boolean
    expectedSalary?: boolean
    expectedSalaryUnit?: boolean
    currentSalary?: boolean
    currentSalaryUnit?: boolean
    experience?: boolean
    info?: boolean
    website?: boolean
    appliedAt?: boolean | CandidateForJobsFindManyArgs
    skills?: boolean | CandidateSkillsFindManyArgs
    socials?: boolean | CandidateSocialFindManyArgs
    interview?: boolean | InterviewRoundFindManyArgs
    _count?: boolean | CandidateCountOutputTypeArgs
  }

  export type CandidateInclude = {
    appliedAt?: boolean | CandidateForJobsFindManyArgs
    skills?: boolean | CandidateSkillsFindManyArgs
    socials?: boolean | CandidateSocialFindManyArgs
    interview?: boolean | InterviewRoundFindManyArgs
    _count?: boolean | CandidateCountOutputTypeArgs
  }

  export type CandidateGetPayload<
    S extends boolean | null | undefined | CandidateArgs,
    U = keyof S
      > = S extends true
        ? Candidate
    : S extends undefined
    ? never
    : S extends CandidateArgs | CandidateFindManyArgs
    ?'include' extends U
    ? Candidate  & {
    [P in TrueKeys<S['include']>]:
        P extends 'appliedAt' ? Array < CandidateForJobsGetPayload<S['include'][P]>>  :
        P extends 'skills' ? Array < CandidateSkillsGetPayload<S['include'][P]>>  :
        P extends 'socials' ? Array < CandidateSocialGetPayload<S['include'][P]>>  :
        P extends 'interview' ? Array < InterviewRoundGetPayload<S['include'][P]>>  :
        P extends '_count' ? CandidateCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'appliedAt' ? Array < CandidateForJobsGetPayload<S['select'][P]>>  :
        P extends 'skills' ? Array < CandidateSkillsGetPayload<S['select'][P]>>  :
        P extends 'socials' ? Array < CandidateSocialGetPayload<S['select'][P]>>  :
        P extends 'interview' ? Array < InterviewRoundGetPayload<S['select'][P]>>  :
        P extends '_count' ? CandidateCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Candidate ? Candidate[P] : never
  } 
    : Candidate
  : Candidate


  type CandidateCountArgs = Merge<
    Omit<CandidateFindManyArgs, 'select' | 'include'> & {
      select?: CandidateCountAggregateInputType | true
    }
  >

  export interface CandidateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Candidate'> extends True ? CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>> : CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Candidate'> extends True ? CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>> : CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CandidateFindManyArgs>(
      args?: SelectSubset<T, CandidateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Candidate>>, PrismaPromise<Array<CandidateGetPayload<T>>>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
    **/
    create<T extends CandidateCreateArgs>(
      args: SelectSubset<T, CandidateCreateArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Create many Candidates.
     *     @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     *     @example
     *     // Create many Candidates
     *     const candidate = await prisma.candidate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidateCreateManyArgs>(
      args?: SelectSubset<T, CandidateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
    **/
    delete<T extends CandidateDeleteArgs>(
      args: SelectSubset<T, CandidateDeleteArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateUpdateArgs>(
      args: SelectSubset<T, CandidateUpdateArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateDeleteManyArgs>(
      args?: SelectSubset<T, CandidateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateUpdateManyArgs>(
      args: SelectSubset<T, CandidateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateUpsertArgs>(
      args: SelectSubset<T, CandidateUpsertArgs>
    ): CheckSelect<T, Prisma__CandidateClient<Candidate>, Prisma__CandidateClient<CandidateGetPayload<T>>>

    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appliedAt<T extends CandidateForJobsFindManyArgs = {}>(args?: Subset<T, CandidateForJobsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CandidateForJobs>>, PrismaPromise<Array<CandidateForJobsGetPayload<T>>>>;

    skills<T extends CandidateSkillsFindManyArgs = {}>(args?: Subset<T, CandidateSkillsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CandidateSkills>>, PrismaPromise<Array<CandidateSkillsGetPayload<T>>>>;

    socials<T extends CandidateSocialFindManyArgs = {}>(args?: Subset<T, CandidateSocialFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CandidateSocial>>, PrismaPromise<Array<CandidateSocialGetPayload<T>>>>;

    interview<T extends InterviewRoundFindManyArgs = {}>(args?: Subset<T, InterviewRoundFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InterviewRound>>, PrismaPromise<Array<InterviewRoundGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Throw an Error if a Candidate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Candidate to fetch.
     * 
    **/
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Throw an Error if a Candidate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Candidate to fetch.
     * 
    **/
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     * 
    **/
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     * 
    **/
    distinct?: Enumerable<CandidateScalarFieldEnum>
  }


  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Filter, which Candidates to fetch.
     * 
    **/
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     * 
    **/
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CandidateScalarFieldEnum>
  }


  /**
   * Candidate create
   */
  export type CandidateCreateArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * The data needed to create a Candidate.
     * 
    **/
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }


  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs = {
    /**
     * The data used to create many Candidates.
     * 
    **/
    data: Enumerable<CandidateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Candidate update
   */
  export type CandidateUpdateArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * The data needed to update a Candidate.
     * 
    **/
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     * 
    **/
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs = {
    /**
     * The data used to update Candidates.
     * 
    **/
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     * 
    **/
    where?: CandidateWhereInput
  }


  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     * 
    **/
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     * 
    **/
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }


  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
    /**
     * Filter which Candidate to delete.
     * 
    **/
    where: CandidateWhereUniqueInput
  }


  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs = {
    /**
     * Filter which Candidates to delete
     * 
    **/
    where?: CandidateWhereInput
  }


  /**
   * Candidate without action
   */
  export type CandidateArgs = {
    /**
     * Select specific fields to fetch from the Candidate
     * 
    **/
    select?: CandidateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateInclude | null
  }



  /**
   * Model Skills
   */


  export type AggregateSkills = {
    _count: SkillsCountAggregateOutputType | null
    _avg: SkillsAvgAggregateOutputType | null
    _sum: SkillsSumAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  export type SkillsAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillsSumAggregateOutputType = {
    id: number | null
  }

  export type SkillsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SkillsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SkillsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SkillsAvgAggregateInputType = {
    id?: true
  }

  export type SkillsSumAggregateInputType = {
    id?: true
  }

  export type SkillsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SkillsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SkillsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SkillsAggregateArgs = {
    /**
     * Filter which Skills to aggregate.
     * 
    **/
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillsMaxAggregateInputType
  }

  export type GetSkillsAggregateType<T extends SkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkills[P]>
      : GetScalarType<T[P], AggregateSkills[P]>
  }




  export type SkillsGroupByArgs = {
    where?: SkillsWhereInput
    orderBy?: Enumerable<SkillsOrderByWithAggregationInput>
    by: Array<SkillsScalarFieldEnum>
    having?: SkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillsCountAggregateInputType | true
    _avg?: SkillsAvgAggregateInputType
    _sum?: SkillsSumAggregateInputType
    _min?: SkillsMinAggregateInputType
    _max?: SkillsMaxAggregateInputType
  }


  export type SkillsGroupByOutputType = {
    id: number
    name: string
    _count: SkillsCountAggregateOutputType | null
    _avg: SkillsAvgAggregateOutputType | null
    _sum: SkillsSumAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  type GetSkillsGroupByPayload<T extends SkillsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillsGroupByOutputType[P]>
            : GetScalarType<T[P], SkillsGroupByOutputType[P]>
        }
      >
    >


  export type SkillsSelect = {
    id?: boolean
    name?: boolean
    candidates?: boolean | CandidateSkillsFindManyArgs
    employee?: boolean | EmployeeSkillsFindManyArgs
    _count?: boolean | SkillsCountOutputTypeArgs
  }

  export type SkillsInclude = {
    candidates?: boolean | CandidateSkillsFindManyArgs
    employee?: boolean | EmployeeSkillsFindManyArgs
    _count?: boolean | SkillsCountOutputTypeArgs
  }

  export type SkillsGetPayload<
    S extends boolean | null | undefined | SkillsArgs,
    U = keyof S
      > = S extends true
        ? Skills
    : S extends undefined
    ? never
    : S extends SkillsArgs | SkillsFindManyArgs
    ?'include' extends U
    ? Skills  & {
    [P in TrueKeys<S['include']>]:
        P extends 'candidates' ? Array < CandidateSkillsGetPayload<S['include'][P]>>  :
        P extends 'employee' ? Array < EmployeeSkillsGetPayload<S['include'][P]>>  :
        P extends '_count' ? SkillsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'candidates' ? Array < CandidateSkillsGetPayload<S['select'][P]>>  :
        P extends 'employee' ? Array < EmployeeSkillsGetPayload<S['select'][P]>>  :
        P extends '_count' ? SkillsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Skills ? Skills[P] : never
  } 
    : Skills
  : Skills


  type SkillsCountArgs = Merge<
    Omit<SkillsFindManyArgs, 'select' | 'include'> & {
      select?: SkillsCountAggregateInputType | true
    }
  >

  export interface SkillsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Skills that matches the filter.
     * @param {SkillsFindUniqueArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkillsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skills'> extends True ? CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>> : CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>

    /**
     * Find the first Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindFirstArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkillsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skills'> extends True ? CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>> : CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skills.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillsWithIdOnly = await prisma.skills.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkillsFindManyArgs>(
      args?: SelectSubset<T, SkillsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Skills>>, PrismaPromise<Array<SkillsGetPayload<T>>>>

    /**
     * Create a Skills.
     * @param {SkillsCreateArgs} args - Arguments to create a Skills.
     * @example
     * // Create one Skills
     * const Skills = await prisma.skills.create({
     *   data: {
     *     // ... data to create a Skills
     *   }
     * })
     * 
    **/
    create<T extends SkillsCreateArgs>(
      args: SelectSubset<T, SkillsCreateArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Create many Skills.
     *     @param {SkillsCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skills = await prisma.skills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillsCreateManyArgs>(
      args?: SelectSubset<T, SkillsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Skills.
     * @param {SkillsDeleteArgs} args - Arguments to delete one Skills.
     * @example
     * // Delete one Skills
     * const Skills = await prisma.skills.delete({
     *   where: {
     *     // ... filter to delete one Skills
     *   }
     * })
     * 
    **/
    delete<T extends SkillsDeleteArgs>(
      args: SelectSubset<T, SkillsDeleteArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Update one Skills.
     * @param {SkillsUpdateArgs} args - Arguments to update one Skills.
     * @example
     * // Update one Skills
     * const skills = await prisma.skills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillsUpdateArgs>(
      args: SelectSubset<T, SkillsUpdateArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Delete zero or more Skills.
     * @param {SkillsDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillsDeleteManyArgs>(
      args?: SelectSubset<T, SkillsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skills = await prisma.skills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillsUpdateManyArgs>(
      args: SelectSubset<T, SkillsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Skills.
     * @param {SkillsUpsertArgs} args - Arguments to update or create a Skills.
     * @example
     * // Update or create a Skills
     * const skills = await prisma.skills.upsert({
     *   create: {
     *     // ... data to create a Skills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skills we want to update
     *   }
     * })
    **/
    upsert<T extends SkillsUpsertArgs>(
      args: SelectSubset<T, SkillsUpsertArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skills.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillsCountArgs>(
      args?: Subset<T, SkillsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillsAggregateArgs>(args: Subset<T, SkillsAggregateArgs>): PrismaPromise<GetSkillsAggregateType<T>>

    /**
     * Group by Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillsGroupByArgs['orderBy'] }
        : { orderBy?: SkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkillsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidates<T extends CandidateSkillsFindManyArgs = {}>(args?: Subset<T, CandidateSkillsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CandidateSkills>>, PrismaPromise<Array<CandidateSkillsGetPayload<T>>>>;

    employee<T extends EmployeeSkillsFindManyArgs = {}>(args?: Subset<T, EmployeeSkillsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EmployeeSkills>>, PrismaPromise<Array<EmployeeSkillsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Skills findUnique
   */
  export type SkillsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Throw an Error if a Skills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills findFirst
   */
  export type SkillsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Throw an Error if a Skills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     * 
    **/
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     * 
    **/
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * Skills findMany
   */
  export type SkillsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     * 
    **/
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * Skills create
   */
  export type SkillsCreateArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * The data needed to create a Skills.
     * 
    **/
    data: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
  }


  /**
   * Skills createMany
   */
  export type SkillsCreateManyArgs = {
    /**
     * The data used to create many Skills.
     * 
    **/
    data: Enumerable<SkillsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skills update
   */
  export type SkillsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * The data needed to update a Skills.
     * 
    **/
    data: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
    /**
     * Choose, which Skills to update.
     * 
    **/
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills updateMany
   */
  export type SkillsUpdateManyArgs = {
    /**
     * The data used to update Skills.
     * 
    **/
    data: XOR<SkillsUpdateManyMutationInput, SkillsUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     * 
    **/
    where?: SkillsWhereInput
  }


  /**
   * Skills upsert
   */
  export type SkillsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * The filter to search for the Skills to update in case it exists.
     * 
    **/
    where: SkillsWhereUniqueInput
    /**
     * In case the Skills found by the `where` argument doesn't exist, create a new Skills with this data.
     * 
    **/
    create: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
    /**
     * In case the Skills was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
  }


  /**
   * Skills delete
   */
  export type SkillsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Filter which Skills to delete.
     * 
    **/
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills deleteMany
   */
  export type SkillsDeleteManyArgs = {
    /**
     * Filter which Skills to delete
     * 
    **/
    where?: SkillsWhereInput
  }


  /**
   * Skills without action
   */
  export type SkillsArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
  }



  /**
   * Model Job
   */


  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    experienceStartRng: number | null
    experienceEndRng: number | null
    salaryStartRng: number | null
    salaryEndRng: number | null
    assignedTo: number | null
    opening: number | null
    filled: number | null
    active: number | null
    contacting: number | null
    archived: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    experienceStartRng: number | null
    experienceEndRng: number | null
    salaryStartRng: number | null
    salaryEndRng: number | null
    assignedTo: number | null
    opening: number | null
    filled: number | null
    active: number | null
    contacting: number | null
    archived: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    title: string | null
    experienceStartRng: number | null
    experienceEndRng: number | null
    salaryStartRng: number | null
    salaryEndRng: number | null
    createdAt: Date | null
    closedAt: Date | null
    assignedTo: number | null
    status: string | null
    description: string | null
    opening: number | null
    filled: number | null
    active: number | null
    contacting: number | null
    archived: number | null
    department: string | null
    city: string | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    title: string | null
    experienceStartRng: number | null
    experienceEndRng: number | null
    salaryStartRng: number | null
    salaryEndRng: number | null
    createdAt: Date | null
    closedAt: Date | null
    assignedTo: number | null
    status: string | null
    description: string | null
    opening: number | null
    filled: number | null
    active: number | null
    contacting: number | null
    archived: number | null
    department: string | null
    city: string | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt: number
    closedAt: number
    assignedTo: number
    status: number
    description: number
    opening: number
    filled: number
    active: number
    contacting: number
    archived: number
    department: number
    jobReq: number
    jobRes: number
    city: number
    keywords: number
    type: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    experienceStartRng?: true
    experienceEndRng?: true
    salaryStartRng?: true
    salaryEndRng?: true
    assignedTo?: true
    opening?: true
    filled?: true
    active?: true
    contacting?: true
    archived?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    experienceStartRng?: true
    experienceEndRng?: true
    salaryStartRng?: true
    salaryEndRng?: true
    assignedTo?: true
    opening?: true
    filled?: true
    active?: true
    contacting?: true
    archived?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    experienceStartRng?: true
    experienceEndRng?: true
    salaryStartRng?: true
    salaryEndRng?: true
    createdAt?: true
    closedAt?: true
    assignedTo?: true
    status?: true
    description?: true
    opening?: true
    filled?: true
    active?: true
    contacting?: true
    archived?: true
    department?: true
    city?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    experienceStartRng?: true
    experienceEndRng?: true
    salaryStartRng?: true
    salaryEndRng?: true
    createdAt?: true
    closedAt?: true
    assignedTo?: true
    status?: true
    description?: true
    opening?: true
    filled?: true
    active?: true
    contacting?: true
    archived?: true
    department?: true
    city?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    experienceStartRng?: true
    experienceEndRng?: true
    salaryStartRng?: true
    salaryEndRng?: true
    createdAt?: true
    closedAt?: true
    assignedTo?: true
    status?: true
    description?: true
    opening?: true
    filled?: true
    active?: true
    contacting?: true
    archived?: true
    department?: true
    jobReq?: true
    jobRes?: true
    city?: true
    keywords?: true
    type?: true
    _all?: true
  }

  export type JobAggregateArgs = {
    /**
     * Filter which Job to aggregate.
     * 
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<JobOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs = {
    where?: JobWhereInput
    orderBy?: Enumerable<JobOrderByWithAggregationInput>
    by: Array<JobScalarFieldEnum>
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }


  export type JobGroupByOutputType = {
    id: number
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt: Date
    closedAt: Date | null
    assignedTo: number
    status: string
    description: string
    opening: number
    filled: number
    active: number
    contacting: number
    archived: number
    department: string
    jobReq: string[]
    jobRes: string[]
    city: string
    keywords: string[]
    type: string[]
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect = {
    id?: boolean
    title?: boolean
    experienceStartRng?: boolean
    experienceEndRng?: boolean
    salaryStartRng?: boolean
    salaryEndRng?: boolean
    createdAt?: boolean
    closedAt?: boolean
    assignedTo?: boolean
    status?: boolean
    description?: boolean
    opening?: boolean
    filled?: boolean
    active?: boolean
    contacting?: boolean
    archived?: boolean
    department?: boolean
    jobReq?: boolean
    jobRes?: boolean
    city?: boolean
    keywords?: boolean
    type?: boolean
    employee?: boolean | EmployeeArgs
    appliedBy?: boolean | CandidateForJobsFindManyArgs
    _count?: boolean | JobCountOutputTypeArgs
  }

  export type JobInclude = {
    employee?: boolean | EmployeeArgs
    appliedBy?: boolean | CandidateForJobsFindManyArgs
    _count?: boolean | JobCountOutputTypeArgs
  }

  export type JobGetPayload<
    S extends boolean | null | undefined | JobArgs,
    U = keyof S
      > = S extends true
        ? Job
    : S extends undefined
    ? never
    : S extends JobArgs | JobFindManyArgs
    ?'include' extends U
    ? Job  & {
    [P in TrueKeys<S['include']>]:
        P extends 'employee' ? EmployeeGetPayload<S['include'][P]> :
        P extends 'appliedBy' ? Array < CandidateForJobsGetPayload<S['include'][P]>>  :
        P extends '_count' ? JobCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'employee' ? EmployeeGetPayload<S['select'][P]> :
        P extends 'appliedBy' ? Array < CandidateForJobsGetPayload<S['select'][P]>>  :
        P extends '_count' ? JobCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Job ? Job[P] : never
  } 
    : Job
  : Job


  type JobCountArgs = Merge<
    Omit<JobFindManyArgs, 'select' | 'include'> & {
      select?: JobCountAggregateInputType | true
    }
  >

  export interface JobDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JobFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Job'> extends True ? CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>> : CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JobFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Job'> extends True ? CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>> : CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobFindManyArgs>(
      args?: SelectSubset<T, JobFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
    **/
    create<T extends JobCreateArgs>(
      args: SelectSubset<T, JobCreateArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Create many Jobs.
     *     @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     *     @example
     *     // Create many Jobs
     *     const job = await prisma.job.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobCreateManyArgs>(
      args?: SelectSubset<T, JobCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
    **/
    delete<T extends JobDeleteArgs>(
      args: SelectSubset<T, JobDeleteArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobUpdateArgs>(
      args: SelectSubset<T, JobUpdateArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobDeleteManyArgs>(
      args?: SelectSubset<T, JobDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobUpdateManyArgs>(
      args: SelectSubset<T, JobUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
    **/
    upsert<T extends JobUpsertArgs>(
      args: SelectSubset<T, JobUpsertArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JobClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employee<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>;

    appliedBy<T extends CandidateForJobsFindManyArgs = {}>(args?: Subset<T, CandidateForJobsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CandidateForJobs>>, PrismaPromise<Array<CandidateForJobsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * Throw an Error if a Job can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Job to fetch.
     * 
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job findFirst
   */
  export type JobFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * Throw an Error if a Job can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Job to fetch.
     * 
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<JobOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     * 
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     * 
    **/
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job findMany
   */
  export type JobFindManyArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * Filter, which Jobs to fetch.
     * 
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<JobOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     * 
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job create
   */
  export type JobCreateArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * The data needed to create a Job.
     * 
    **/
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }


  /**
   * Job createMany
   */
  export type JobCreateManyArgs = {
    /**
     * The data used to create many Jobs.
     * 
    **/
    data: Enumerable<JobCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Job update
   */
  export type JobUpdateArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * The data needed to update a Job.
     * 
    **/
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     * 
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs = {
    /**
     * The data used to update Jobs.
     * 
    **/
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     * 
    **/
    where?: JobWhereInput
  }


  /**
   * Job upsert
   */
  export type JobUpsertArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * The filter to search for the Job to update in case it exists.
     * 
    **/
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     * 
    **/
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }


  /**
   * Job delete
   */
  export type JobDeleteArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
    /**
     * Filter which Job to delete.
     * 
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs = {
    /**
     * Filter which Jobs to delete
     * 
    **/
    where?: JobWhereInput
  }


  /**
   * Job without action
   */
  export type JobArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JobInclude | null
  }



  /**
   * Model Newsletter
   */


  export type AggregateNewsletter = {
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  export type NewsletterAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsletterSumAggregateOutputType = {
    id: number | null
  }

  export type NewsletterMinAggregateOutputType = {
    id: number | null
    email: string | null
  }

  export type NewsletterMaxAggregateOutputType = {
    id: number | null
    email: string | null
  }

  export type NewsletterCountAggregateOutputType = {
    id: number
    email: number
    _all: number
  }


  export type NewsletterAvgAggregateInputType = {
    id?: true
  }

  export type NewsletterSumAggregateInputType = {
    id?: true
  }

  export type NewsletterMinAggregateInputType = {
    id?: true
    email?: true
  }

  export type NewsletterMaxAggregateInputType = {
    id?: true
    email?: true
  }

  export type NewsletterCountAggregateInputType = {
    id?: true
    email?: true
    _all?: true
  }

  export type NewsletterAggregateArgs = {
    /**
     * Filter which Newsletter to aggregate.
     * 
    **/
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsletterOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Newsletters
    **/
    _count?: true | NewsletterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsletterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsletterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsletterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsletterMaxAggregateInputType
  }

  export type GetNewsletterAggregateType<T extends NewsletterAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsletter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsletter[P]>
      : GetScalarType<T[P], AggregateNewsletter[P]>
  }




  export type NewsletterGroupByArgs = {
    where?: NewsletterWhereInput
    orderBy?: Enumerable<NewsletterOrderByWithAggregationInput>
    by: Array<NewsletterScalarFieldEnum>
    having?: NewsletterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsletterCountAggregateInputType | true
    _avg?: NewsletterAvgAggregateInputType
    _sum?: NewsletterSumAggregateInputType
    _min?: NewsletterMinAggregateInputType
    _max?: NewsletterMaxAggregateInputType
  }


  export type NewsletterGroupByOutputType = {
    id: number
    email: string
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  type GetNewsletterGroupByPayload<T extends NewsletterGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NewsletterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsletterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
            : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
        }
      >
    >


  export type NewsletterSelect = {
    id?: boolean
    email?: boolean
  }

  export type NewsletterGetPayload<
    S extends boolean | null | undefined | NewsletterArgs,
    U = keyof S
      > = S extends true
        ? Newsletter
    : S extends undefined
    ? never
    : S extends NewsletterArgs | NewsletterFindManyArgs
    ?'include' extends U
    ? Newsletter 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Newsletter ? Newsletter[P] : never
  } 
    : Newsletter
  : Newsletter


  type NewsletterCountArgs = Merge<
    Omit<NewsletterFindManyArgs, 'select' | 'include'> & {
      select?: NewsletterCountAggregateInputType | true
    }
  >

  export interface NewsletterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Newsletter that matches the filter.
     * @param {NewsletterFindUniqueArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsletterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NewsletterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Newsletter'> extends True ? CheckSelect<T, Prisma__NewsletterClient<Newsletter>, Prisma__NewsletterClient<NewsletterGetPayload<T>>> : CheckSelect<T, Prisma__NewsletterClient<Newsletter | null >, Prisma__NewsletterClient<NewsletterGetPayload<T> | null >>

    /**
     * Find the first Newsletter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsletterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NewsletterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Newsletter'> extends True ? CheckSelect<T, Prisma__NewsletterClient<Newsletter>, Prisma__NewsletterClient<NewsletterGetPayload<T>>> : CheckSelect<T, Prisma__NewsletterClient<Newsletter | null >, Prisma__NewsletterClient<NewsletterGetPayload<T> | null >>

    /**
     * Find zero or more Newsletters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newsletters
     * const newsletters = await prisma.newsletter.findMany()
     * 
     * // Get first 10 Newsletters
     * const newsletters = await prisma.newsletter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsletterFindManyArgs>(
      args?: SelectSubset<T, NewsletterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Newsletter>>, PrismaPromise<Array<NewsletterGetPayload<T>>>>

    /**
     * Create a Newsletter.
     * @param {NewsletterCreateArgs} args - Arguments to create a Newsletter.
     * @example
     * // Create one Newsletter
     * const Newsletter = await prisma.newsletter.create({
     *   data: {
     *     // ... data to create a Newsletter
     *   }
     * })
     * 
    **/
    create<T extends NewsletterCreateArgs>(
      args: SelectSubset<T, NewsletterCreateArgs>
    ): CheckSelect<T, Prisma__NewsletterClient<Newsletter>, Prisma__NewsletterClient<NewsletterGetPayload<T>>>

    /**
     * Create many Newsletters.
     *     @param {NewsletterCreateManyArgs} args - Arguments to create many Newsletters.
     *     @example
     *     // Create many Newsletters
     *     const newsletter = await prisma.newsletter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NewsletterCreateManyArgs>(
      args?: SelectSubset<T, NewsletterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Newsletter.
     * @param {NewsletterDeleteArgs} args - Arguments to delete one Newsletter.
     * @example
     * // Delete one Newsletter
     * const Newsletter = await prisma.newsletter.delete({
     *   where: {
     *     // ... filter to delete one Newsletter
     *   }
     * })
     * 
    **/
    delete<T extends NewsletterDeleteArgs>(
      args: SelectSubset<T, NewsletterDeleteArgs>
    ): CheckSelect<T, Prisma__NewsletterClient<Newsletter>, Prisma__NewsletterClient<NewsletterGetPayload<T>>>

    /**
     * Update one Newsletter.
     * @param {NewsletterUpdateArgs} args - Arguments to update one Newsletter.
     * @example
     * // Update one Newsletter
     * const newsletter = await prisma.newsletter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsletterUpdateArgs>(
      args: SelectSubset<T, NewsletterUpdateArgs>
    ): CheckSelect<T, Prisma__NewsletterClient<Newsletter>, Prisma__NewsletterClient<NewsletterGetPayload<T>>>

    /**
     * Delete zero or more Newsletters.
     * @param {NewsletterDeleteManyArgs} args - Arguments to filter Newsletters to delete.
     * @example
     * // Delete a few Newsletters
     * const { count } = await prisma.newsletter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsletterDeleteManyArgs>(
      args?: SelectSubset<T, NewsletterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newsletters
     * const newsletter = await prisma.newsletter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsletterUpdateManyArgs>(
      args: SelectSubset<T, NewsletterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Newsletter.
     * @param {NewsletterUpsertArgs} args - Arguments to update or create a Newsletter.
     * @example
     * // Update or create a Newsletter
     * const newsletter = await prisma.newsletter.upsert({
     *   create: {
     *     // ... data to create a Newsletter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newsletter we want to update
     *   }
     * })
    **/
    upsert<T extends NewsletterUpsertArgs>(
      args: SelectSubset<T, NewsletterUpsertArgs>
    ): CheckSelect<T, Prisma__NewsletterClient<Newsletter>, Prisma__NewsletterClient<NewsletterGetPayload<T>>>

    /**
     * Count the number of Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterCountArgs} args - Arguments to filter Newsletters to count.
     * @example
     * // Count the number of Newsletters
     * const count = await prisma.newsletter.count({
     *   where: {
     *     // ... the filter for the Newsletters we want to count
     *   }
     * })
    **/
    count<T extends NewsletterCountArgs>(
      args?: Subset<T, NewsletterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsletterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsletterAggregateArgs>(args: Subset<T, NewsletterAggregateArgs>): PrismaPromise<GetNewsletterAggregateType<T>>

    /**
     * Group by Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsletterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsletterGroupByArgs['orderBy'] }
        : { orderBy?: NewsletterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsletterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsletterGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Newsletter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NewsletterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Newsletter findUnique
   */
  export type NewsletterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * Throw an Error if a Newsletter can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Newsletter to fetch.
     * 
    **/
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter findFirst
   */
  export type NewsletterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * Throw an Error if a Newsletter can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Newsletter to fetch.
     * 
    **/
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsletterOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     * 
    **/
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     * 
    **/
    distinct?: Enumerable<NewsletterScalarFieldEnum>
  }


  /**
   * Newsletter findMany
   */
  export type NewsletterFindManyArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * Filter, which Newsletters to fetch.
     * 
    **/
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsletterOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Newsletters.
     * 
    **/
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NewsletterScalarFieldEnum>
  }


  /**
   * Newsletter create
   */
  export type NewsletterCreateArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * The data needed to create a Newsletter.
     * 
    **/
    data: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
  }


  /**
   * Newsletter createMany
   */
  export type NewsletterCreateManyArgs = {
    /**
     * The data used to create many Newsletters.
     * 
    **/
    data: Enumerable<NewsletterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Newsletter update
   */
  export type NewsletterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * The data needed to update a Newsletter.
     * 
    **/
    data: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
    /**
     * Choose, which Newsletter to update.
     * 
    **/
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter updateMany
   */
  export type NewsletterUpdateManyArgs = {
    /**
     * The data used to update Newsletters.
     * 
    **/
    data: XOR<NewsletterUpdateManyMutationInput, NewsletterUncheckedUpdateManyInput>
    /**
     * Filter which Newsletters to update
     * 
    **/
    where?: NewsletterWhereInput
  }


  /**
   * Newsletter upsert
   */
  export type NewsletterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * The filter to search for the Newsletter to update in case it exists.
     * 
    **/
    where: NewsletterWhereUniqueInput
    /**
     * In case the Newsletter found by the `where` argument doesn't exist, create a new Newsletter with this data.
     * 
    **/
    create: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
    /**
     * In case the Newsletter was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
  }


  /**
   * Newsletter delete
   */
  export type NewsletterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
    /**
     * Filter which Newsletter to delete.
     * 
    **/
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter deleteMany
   */
  export type NewsletterDeleteManyArgs = {
    /**
     * Filter which Newsletters to delete
     * 
    **/
    where?: NewsletterWhereInput
  }


  /**
   * Newsletter without action
   */
  export type NewsletterArgs = {
    /**
     * Select specific fields to fetch from the Newsletter
     * 
    **/
    select?: NewsletterSelect | null
  }



  /**
   * Model InterviewRound
   */


  export type AggregateInterviewRound = {
    _count: InterviewRoundCountAggregateOutputType | null
    _avg: InterviewRoundAvgAggregateOutputType | null
    _sum: InterviewRoundSumAggregateOutputType | null
    _min: InterviewRoundMinAggregateOutputType | null
    _max: InterviewRoundMaxAggregateOutputType | null
  }

  export type InterviewRoundAvgAggregateOutputType = {
    id: number | null
    interviewerId: number | null
    candidateId: number | null
  }

  export type InterviewRoundSumAggregateOutputType = {
    id: number | null
    interviewerId: number | null
    candidateId: number | null
  }

  export type InterviewRoundMinAggregateOutputType = {
    id: number | null
    title: string | null
    interviewerId: number | null
    candidateId: number | null
    date: Date | null
    startTime: Date | null
    endTime: Date | null
    url: string | null
    feedback: string | null
  }

  export type InterviewRoundMaxAggregateOutputType = {
    id: number | null
    title: string | null
    interviewerId: number | null
    candidateId: number | null
    date: Date | null
    startTime: Date | null
    endTime: Date | null
    url: string | null
    feedback: string | null
  }

  export type InterviewRoundCountAggregateOutputType = {
    id: number
    title: number
    interviewerId: number
    candidateId: number
    date: number
    startTime: number
    endTime: number
    url: number
    feedback: number
    _all: number
  }


  export type InterviewRoundAvgAggregateInputType = {
    id?: true
    interviewerId?: true
    candidateId?: true
  }

  export type InterviewRoundSumAggregateInputType = {
    id?: true
    interviewerId?: true
    candidateId?: true
  }

  export type InterviewRoundMinAggregateInputType = {
    id?: true
    title?: true
    interviewerId?: true
    candidateId?: true
    date?: true
    startTime?: true
    endTime?: true
    url?: true
    feedback?: true
  }

  export type InterviewRoundMaxAggregateInputType = {
    id?: true
    title?: true
    interviewerId?: true
    candidateId?: true
    date?: true
    startTime?: true
    endTime?: true
    url?: true
    feedback?: true
  }

  export type InterviewRoundCountAggregateInputType = {
    id?: true
    title?: true
    interviewerId?: true
    candidateId?: true
    date?: true
    startTime?: true
    endTime?: true
    url?: true
    feedback?: true
    _all?: true
  }

  export type InterviewRoundAggregateArgs = {
    /**
     * Filter which InterviewRound to aggregate.
     * 
    **/
    where?: InterviewRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewRounds to fetch.
     * 
    **/
    orderBy?: Enumerable<InterviewRoundOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InterviewRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewRounds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewRounds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InterviewRounds
    **/
    _count?: true | InterviewRoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewRoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewRoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewRoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewRoundMaxAggregateInputType
  }

  export type GetInterviewRoundAggregateType<T extends InterviewRoundAggregateArgs> = {
        [P in keyof T & keyof AggregateInterviewRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterviewRound[P]>
      : GetScalarType<T[P], AggregateInterviewRound[P]>
  }




  export type InterviewRoundGroupByArgs = {
    where?: InterviewRoundWhereInput
    orderBy?: Enumerable<InterviewRoundOrderByWithAggregationInput>
    by: Array<InterviewRoundScalarFieldEnum>
    having?: InterviewRoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewRoundCountAggregateInputType | true
    _avg?: InterviewRoundAvgAggregateInputType
    _sum?: InterviewRoundSumAggregateInputType
    _min?: InterviewRoundMinAggregateInputType
    _max?: InterviewRoundMaxAggregateInputType
  }


  export type InterviewRoundGroupByOutputType = {
    id: number
    title: string
    interviewerId: number
    candidateId: number
    date: Date
    startTime: Date
    endTime: Date
    url: string
    feedback: string | null
    _count: InterviewRoundCountAggregateOutputType | null
    _avg: InterviewRoundAvgAggregateOutputType | null
    _sum: InterviewRoundSumAggregateOutputType | null
    _min: InterviewRoundMinAggregateOutputType | null
    _max: InterviewRoundMaxAggregateOutputType | null
  }

  type GetInterviewRoundGroupByPayload<T extends InterviewRoundGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InterviewRoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewRoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewRoundGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewRoundGroupByOutputType[P]>
        }
      >
    >


  export type InterviewRoundSelect = {
    id?: boolean
    title?: boolean
    interviewerId?: boolean
    candidateId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    url?: boolean
    feedback?: boolean
    interviewer?: boolean | EmployeeArgs
    candidate?: boolean | CandidateArgs
  }

  export type InterviewRoundInclude = {
    interviewer?: boolean | EmployeeArgs
    candidate?: boolean | CandidateArgs
  }

  export type InterviewRoundGetPayload<
    S extends boolean | null | undefined | InterviewRoundArgs,
    U = keyof S
      > = S extends true
        ? InterviewRound
    : S extends undefined
    ? never
    : S extends InterviewRoundArgs | InterviewRoundFindManyArgs
    ?'include' extends U
    ? InterviewRound  & {
    [P in TrueKeys<S['include']>]:
        P extends 'interviewer' ? EmployeeGetPayload<S['include'][P]> :
        P extends 'candidate' ? CandidateGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'interviewer' ? EmployeeGetPayload<S['select'][P]> :
        P extends 'candidate' ? CandidateGetPayload<S['select'][P]> :  P extends keyof InterviewRound ? InterviewRound[P] : never
  } 
    : InterviewRound
  : InterviewRound


  type InterviewRoundCountArgs = Merge<
    Omit<InterviewRoundFindManyArgs, 'select' | 'include'> & {
      select?: InterviewRoundCountAggregateInputType | true
    }
  >

  export interface InterviewRoundDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InterviewRound that matches the filter.
     * @param {InterviewRoundFindUniqueArgs} args - Arguments to find a InterviewRound
     * @example
     * // Get one InterviewRound
     * const interviewRound = await prisma.interviewRound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InterviewRoundFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InterviewRoundFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InterviewRound'> extends True ? CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound>, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T>>> : CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound | null >, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T> | null >>

    /**
     * Find the first InterviewRound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewRoundFindFirstArgs} args - Arguments to find a InterviewRound
     * @example
     * // Get one InterviewRound
     * const interviewRound = await prisma.interviewRound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InterviewRoundFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InterviewRoundFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InterviewRound'> extends True ? CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound>, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T>>> : CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound | null >, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T> | null >>

    /**
     * Find zero or more InterviewRounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewRoundFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InterviewRounds
     * const interviewRounds = await prisma.interviewRound.findMany()
     * 
     * // Get first 10 InterviewRounds
     * const interviewRounds = await prisma.interviewRound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewRoundWithIdOnly = await prisma.interviewRound.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InterviewRoundFindManyArgs>(
      args?: SelectSubset<T, InterviewRoundFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InterviewRound>>, PrismaPromise<Array<InterviewRoundGetPayload<T>>>>

    /**
     * Create a InterviewRound.
     * @param {InterviewRoundCreateArgs} args - Arguments to create a InterviewRound.
     * @example
     * // Create one InterviewRound
     * const InterviewRound = await prisma.interviewRound.create({
     *   data: {
     *     // ... data to create a InterviewRound
     *   }
     * })
     * 
    **/
    create<T extends InterviewRoundCreateArgs>(
      args: SelectSubset<T, InterviewRoundCreateArgs>
    ): CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound>, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T>>>

    /**
     * Create many InterviewRounds.
     *     @param {InterviewRoundCreateManyArgs} args - Arguments to create many InterviewRounds.
     *     @example
     *     // Create many InterviewRounds
     *     const interviewRound = await prisma.interviewRound.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InterviewRoundCreateManyArgs>(
      args?: SelectSubset<T, InterviewRoundCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InterviewRound.
     * @param {InterviewRoundDeleteArgs} args - Arguments to delete one InterviewRound.
     * @example
     * // Delete one InterviewRound
     * const InterviewRound = await prisma.interviewRound.delete({
     *   where: {
     *     // ... filter to delete one InterviewRound
     *   }
     * })
     * 
    **/
    delete<T extends InterviewRoundDeleteArgs>(
      args: SelectSubset<T, InterviewRoundDeleteArgs>
    ): CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound>, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T>>>

    /**
     * Update one InterviewRound.
     * @param {InterviewRoundUpdateArgs} args - Arguments to update one InterviewRound.
     * @example
     * // Update one InterviewRound
     * const interviewRound = await prisma.interviewRound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InterviewRoundUpdateArgs>(
      args: SelectSubset<T, InterviewRoundUpdateArgs>
    ): CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound>, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T>>>

    /**
     * Delete zero or more InterviewRounds.
     * @param {InterviewRoundDeleteManyArgs} args - Arguments to filter InterviewRounds to delete.
     * @example
     * // Delete a few InterviewRounds
     * const { count } = await prisma.interviewRound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InterviewRoundDeleteManyArgs>(
      args?: SelectSubset<T, InterviewRoundDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterviewRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewRoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InterviewRounds
     * const interviewRound = await prisma.interviewRound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InterviewRoundUpdateManyArgs>(
      args: SelectSubset<T, InterviewRoundUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InterviewRound.
     * @param {InterviewRoundUpsertArgs} args - Arguments to update or create a InterviewRound.
     * @example
     * // Update or create a InterviewRound
     * const interviewRound = await prisma.interviewRound.upsert({
     *   create: {
     *     // ... data to create a InterviewRound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InterviewRound we want to update
     *   }
     * })
    **/
    upsert<T extends InterviewRoundUpsertArgs>(
      args: SelectSubset<T, InterviewRoundUpsertArgs>
    ): CheckSelect<T, Prisma__InterviewRoundClient<InterviewRound>, Prisma__InterviewRoundClient<InterviewRoundGetPayload<T>>>

    /**
     * Count the number of InterviewRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewRoundCountArgs} args - Arguments to filter InterviewRounds to count.
     * @example
     * // Count the number of InterviewRounds
     * const count = await prisma.interviewRound.count({
     *   where: {
     *     // ... the filter for the InterviewRounds we want to count
     *   }
     * })
    **/
    count<T extends InterviewRoundCountArgs>(
      args?: Subset<T, InterviewRoundCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewRoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InterviewRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewRoundAggregateArgs>(args: Subset<T, InterviewRoundAggregateArgs>): PrismaPromise<GetInterviewRoundAggregateType<T>>

    /**
     * Group by InterviewRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewRoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewRoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewRoundGroupByArgs['orderBy'] }
        : { orderBy?: InterviewRoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewRoundGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InterviewRound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InterviewRoundClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    interviewer<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>;

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InterviewRound findUnique
   */
  export type InterviewRoundFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * Throw an Error if a InterviewRound can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InterviewRound to fetch.
     * 
    **/
    where: InterviewRoundWhereUniqueInput
  }


  /**
   * InterviewRound findFirst
   */
  export type InterviewRoundFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * Throw an Error if a InterviewRound can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InterviewRound to fetch.
     * 
    **/
    where?: InterviewRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewRounds to fetch.
     * 
    **/
    orderBy?: Enumerable<InterviewRoundOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterviewRounds.
     * 
    **/
    cursor?: InterviewRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewRounds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewRounds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterviewRounds.
     * 
    **/
    distinct?: Enumerable<InterviewRoundScalarFieldEnum>
  }


  /**
   * InterviewRound findMany
   */
  export type InterviewRoundFindManyArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * Filter, which InterviewRounds to fetch.
     * 
    **/
    where?: InterviewRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewRounds to fetch.
     * 
    **/
    orderBy?: Enumerable<InterviewRoundOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InterviewRounds.
     * 
    **/
    cursor?: InterviewRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewRounds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewRounds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InterviewRoundScalarFieldEnum>
  }


  /**
   * InterviewRound create
   */
  export type InterviewRoundCreateArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * The data needed to create a InterviewRound.
     * 
    **/
    data: XOR<InterviewRoundCreateInput, InterviewRoundUncheckedCreateInput>
  }


  /**
   * InterviewRound createMany
   */
  export type InterviewRoundCreateManyArgs = {
    /**
     * The data used to create many InterviewRounds.
     * 
    **/
    data: Enumerable<InterviewRoundCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InterviewRound update
   */
  export type InterviewRoundUpdateArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * The data needed to update a InterviewRound.
     * 
    **/
    data: XOR<InterviewRoundUpdateInput, InterviewRoundUncheckedUpdateInput>
    /**
     * Choose, which InterviewRound to update.
     * 
    **/
    where: InterviewRoundWhereUniqueInput
  }


  /**
   * InterviewRound updateMany
   */
  export type InterviewRoundUpdateManyArgs = {
    /**
     * The data used to update InterviewRounds.
     * 
    **/
    data: XOR<InterviewRoundUpdateManyMutationInput, InterviewRoundUncheckedUpdateManyInput>
    /**
     * Filter which InterviewRounds to update
     * 
    **/
    where?: InterviewRoundWhereInput
  }


  /**
   * InterviewRound upsert
   */
  export type InterviewRoundUpsertArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * The filter to search for the InterviewRound to update in case it exists.
     * 
    **/
    where: InterviewRoundWhereUniqueInput
    /**
     * In case the InterviewRound found by the `where` argument doesn't exist, create a new InterviewRound with this data.
     * 
    **/
    create: XOR<InterviewRoundCreateInput, InterviewRoundUncheckedCreateInput>
    /**
     * In case the InterviewRound was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InterviewRoundUpdateInput, InterviewRoundUncheckedUpdateInput>
  }


  /**
   * InterviewRound delete
   */
  export type InterviewRoundDeleteArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
    /**
     * Filter which InterviewRound to delete.
     * 
    **/
    where: InterviewRoundWhereUniqueInput
  }


  /**
   * InterviewRound deleteMany
   */
  export type InterviewRoundDeleteManyArgs = {
    /**
     * Filter which InterviewRounds to delete
     * 
    **/
    where?: InterviewRoundWhereInput
  }


  /**
   * InterviewRound without action
   */
  export type InterviewRoundArgs = {
    /**
     * Select specific fields to fetch from the InterviewRound
     * 
    **/
    select?: InterviewRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InterviewRoundInclude | null
  }



  /**
   * Model CandidateSkills
   */


  export type AggregateCandidateSkills = {
    _count: CandidateSkillsCountAggregateOutputType | null
    _avg: CandidateSkillsAvgAggregateOutputType | null
    _sum: CandidateSkillsSumAggregateOutputType | null
    _min: CandidateSkillsMinAggregateOutputType | null
    _max: CandidateSkillsMaxAggregateOutputType | null
  }

  export type CandidateSkillsAvgAggregateOutputType = {
    candidateId: number | null
    skillId: number | null
    value: number | null
  }

  export type CandidateSkillsSumAggregateOutputType = {
    candidateId: number | null
    skillId: number | null
    value: number | null
  }

  export type CandidateSkillsMinAggregateOutputType = {
    candidateId: number | null
    skillId: number | null
    value: number | null
  }

  export type CandidateSkillsMaxAggregateOutputType = {
    candidateId: number | null
    skillId: number | null
    value: number | null
  }

  export type CandidateSkillsCountAggregateOutputType = {
    candidateId: number
    skillId: number
    value: number
    _all: number
  }


  export type CandidateSkillsAvgAggregateInputType = {
    candidateId?: true
    skillId?: true
    value?: true
  }

  export type CandidateSkillsSumAggregateInputType = {
    candidateId?: true
    skillId?: true
    value?: true
  }

  export type CandidateSkillsMinAggregateInputType = {
    candidateId?: true
    skillId?: true
    value?: true
  }

  export type CandidateSkillsMaxAggregateInputType = {
    candidateId?: true
    skillId?: true
    value?: true
  }

  export type CandidateSkillsCountAggregateInputType = {
    candidateId?: true
    skillId?: true
    value?: true
    _all?: true
  }

  export type CandidateSkillsAggregateArgs = {
    /**
     * Filter which CandidateSkills to aggregate.
     * 
    **/
    where?: CandidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateSkills to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateSkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CandidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateSkills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateSkills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateSkills
    **/
    _count?: true | CandidateSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateSkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateSkillsMaxAggregateInputType
  }

  export type GetCandidateSkillsAggregateType<T extends CandidateSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateSkills[P]>
      : GetScalarType<T[P], AggregateCandidateSkills[P]>
  }




  export type CandidateSkillsGroupByArgs = {
    where?: CandidateSkillsWhereInput
    orderBy?: Enumerable<CandidateSkillsOrderByWithAggregationInput>
    by: Array<CandidateSkillsScalarFieldEnum>
    having?: CandidateSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateSkillsCountAggregateInputType | true
    _avg?: CandidateSkillsAvgAggregateInputType
    _sum?: CandidateSkillsSumAggregateInputType
    _min?: CandidateSkillsMinAggregateInputType
    _max?: CandidateSkillsMaxAggregateInputType
  }


  export type CandidateSkillsGroupByOutputType = {
    candidateId: number
    skillId: number
    value: number
    _count: CandidateSkillsCountAggregateOutputType | null
    _avg: CandidateSkillsAvgAggregateOutputType | null
    _sum: CandidateSkillsSumAggregateOutputType | null
    _min: CandidateSkillsMinAggregateOutputType | null
    _max: CandidateSkillsMaxAggregateOutputType | null
  }

  type GetCandidateSkillsGroupByPayload<T extends CandidateSkillsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CandidateSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateSkillsGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSkillsSelect = {
    candidateId?: boolean
    skillId?: boolean
    value?: boolean
    candidate?: boolean | CandidateArgs
    skill?: boolean | SkillsArgs
  }

  export type CandidateSkillsInclude = {
    candidate?: boolean | CandidateArgs
    skill?: boolean | SkillsArgs
  }

  export type CandidateSkillsGetPayload<
    S extends boolean | null | undefined | CandidateSkillsArgs,
    U = keyof S
      > = S extends true
        ? CandidateSkills
    : S extends undefined
    ? never
    : S extends CandidateSkillsArgs | CandidateSkillsFindManyArgs
    ?'include' extends U
    ? CandidateSkills  & {
    [P in TrueKeys<S['include']>]:
        P extends 'candidate' ? CandidateGetPayload<S['include'][P]> :
        P extends 'skill' ? SkillsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'candidate' ? CandidateGetPayload<S['select'][P]> :
        P extends 'skill' ? SkillsGetPayload<S['select'][P]> :  P extends keyof CandidateSkills ? CandidateSkills[P] : never
  } 
    : CandidateSkills
  : CandidateSkills


  type CandidateSkillsCountArgs = Merge<
    Omit<CandidateSkillsFindManyArgs, 'select' | 'include'> & {
      select?: CandidateSkillsCountAggregateInputType | true
    }
  >

  export interface CandidateSkillsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CandidateSkills that matches the filter.
     * @param {CandidateSkillsFindUniqueArgs} args - Arguments to find a CandidateSkills
     * @example
     * // Get one CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateSkillsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidateSkillsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CandidateSkills'> extends True ? CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills>, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T>>> : CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills | null >, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T> | null >>

    /**
     * Find the first CandidateSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSkillsFindFirstArgs} args - Arguments to find a CandidateSkills
     * @example
     * // Get one CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateSkillsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidateSkillsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CandidateSkills'> extends True ? CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills>, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T>>> : CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills | null >, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T> | null >>

    /**
     * Find zero or more CandidateSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.findMany()
     * 
     * // Get first 10 CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.findMany({ take: 10 })
     * 
     * // Only select the `candidateId`
     * const candidateSkillsWithCandidateIdOnly = await prisma.candidateSkills.findMany({ select: { candidateId: true } })
     * 
    **/
    findMany<T extends CandidateSkillsFindManyArgs>(
      args?: SelectSubset<T, CandidateSkillsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CandidateSkills>>, PrismaPromise<Array<CandidateSkillsGetPayload<T>>>>

    /**
     * Create a CandidateSkills.
     * @param {CandidateSkillsCreateArgs} args - Arguments to create a CandidateSkills.
     * @example
     * // Create one CandidateSkills
     * const CandidateSkills = await prisma.candidateSkills.create({
     *   data: {
     *     // ... data to create a CandidateSkills
     *   }
     * })
     * 
    **/
    create<T extends CandidateSkillsCreateArgs>(
      args: SelectSubset<T, CandidateSkillsCreateArgs>
    ): CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills>, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T>>>

    /**
     * Create many CandidateSkills.
     *     @param {CandidateSkillsCreateManyArgs} args - Arguments to create many CandidateSkills.
     *     @example
     *     // Create many CandidateSkills
     *     const candidateSkills = await prisma.candidateSkills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidateSkillsCreateManyArgs>(
      args?: SelectSubset<T, CandidateSkillsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CandidateSkills.
     * @param {CandidateSkillsDeleteArgs} args - Arguments to delete one CandidateSkills.
     * @example
     * // Delete one CandidateSkills
     * const CandidateSkills = await prisma.candidateSkills.delete({
     *   where: {
     *     // ... filter to delete one CandidateSkills
     *   }
     * })
     * 
    **/
    delete<T extends CandidateSkillsDeleteArgs>(
      args: SelectSubset<T, CandidateSkillsDeleteArgs>
    ): CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills>, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T>>>

    /**
     * Update one CandidateSkills.
     * @param {CandidateSkillsUpdateArgs} args - Arguments to update one CandidateSkills.
     * @example
     * // Update one CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateSkillsUpdateArgs>(
      args: SelectSubset<T, CandidateSkillsUpdateArgs>
    ): CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills>, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T>>>

    /**
     * Delete zero or more CandidateSkills.
     * @param {CandidateSkillsDeleteManyArgs} args - Arguments to filter CandidateSkills to delete.
     * @example
     * // Delete a few CandidateSkills
     * const { count } = await prisma.candidateSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateSkillsDeleteManyArgs>(
      args?: SelectSubset<T, CandidateSkillsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateSkillsUpdateManyArgs>(
      args: SelectSubset<T, CandidateSkillsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidateSkills.
     * @param {CandidateSkillsUpsertArgs} args - Arguments to update or create a CandidateSkills.
     * @example
     * // Update or create a CandidateSkills
     * const candidateSkills = await prisma.candidateSkills.upsert({
     *   create: {
     *     // ... data to create a CandidateSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateSkills we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateSkillsUpsertArgs>(
      args: SelectSubset<T, CandidateSkillsUpsertArgs>
    ): CheckSelect<T, Prisma__CandidateSkillsClient<CandidateSkills>, Prisma__CandidateSkillsClient<CandidateSkillsGetPayload<T>>>

    /**
     * Count the number of CandidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSkillsCountArgs} args - Arguments to filter CandidateSkills to count.
     * @example
     * // Count the number of CandidateSkills
     * const count = await prisma.candidateSkills.count({
     *   where: {
     *     // ... the filter for the CandidateSkills we want to count
     *   }
     * })
    **/
    count<T extends CandidateSkillsCountArgs>(
      args?: Subset<T, CandidateSkillsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateSkillsAggregateArgs>(args: Subset<T, CandidateSkillsAggregateArgs>): PrismaPromise<GetCandidateSkillsAggregateType<T>>

    /**
     * Group by CandidateSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateSkillsGroupByArgs['orderBy'] }
        : { orderBy?: CandidateSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateSkillsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidateSkillsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    skill<T extends SkillsArgs = {}>(args?: Subset<T, SkillsArgs>): CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CandidateSkills findUnique
   */
  export type CandidateSkillsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * Throw an Error if a CandidateSkills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CandidateSkills to fetch.
     * 
    **/
    where: CandidateSkillsWhereUniqueInput
  }


  /**
   * CandidateSkills findFirst
   */
  export type CandidateSkillsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * Throw an Error if a CandidateSkills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CandidateSkills to fetch.
     * 
    **/
    where?: CandidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateSkills to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateSkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateSkills.
     * 
    **/
    cursor?: CandidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateSkills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateSkills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateSkills.
     * 
    **/
    distinct?: Enumerable<CandidateSkillsScalarFieldEnum>
  }


  /**
   * CandidateSkills findMany
   */
  export type CandidateSkillsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * Filter, which CandidateSkills to fetch.
     * 
    **/
    where?: CandidateSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateSkills to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateSkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateSkills.
     * 
    **/
    cursor?: CandidateSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateSkills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateSkills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CandidateSkillsScalarFieldEnum>
  }


  /**
   * CandidateSkills create
   */
  export type CandidateSkillsCreateArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * The data needed to create a CandidateSkills.
     * 
    **/
    data: XOR<CandidateSkillsCreateInput, CandidateSkillsUncheckedCreateInput>
  }


  /**
   * CandidateSkills createMany
   */
  export type CandidateSkillsCreateManyArgs = {
    /**
     * The data used to create many CandidateSkills.
     * 
    **/
    data: Enumerable<CandidateSkillsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CandidateSkills update
   */
  export type CandidateSkillsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * The data needed to update a CandidateSkills.
     * 
    **/
    data: XOR<CandidateSkillsUpdateInput, CandidateSkillsUncheckedUpdateInput>
    /**
     * Choose, which CandidateSkills to update.
     * 
    **/
    where: CandidateSkillsWhereUniqueInput
  }


  /**
   * CandidateSkills updateMany
   */
  export type CandidateSkillsUpdateManyArgs = {
    /**
     * The data used to update CandidateSkills.
     * 
    **/
    data: XOR<CandidateSkillsUpdateManyMutationInput, CandidateSkillsUncheckedUpdateManyInput>
    /**
     * Filter which CandidateSkills to update
     * 
    **/
    where?: CandidateSkillsWhereInput
  }


  /**
   * CandidateSkills upsert
   */
  export type CandidateSkillsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * The filter to search for the CandidateSkills to update in case it exists.
     * 
    **/
    where: CandidateSkillsWhereUniqueInput
    /**
     * In case the CandidateSkills found by the `where` argument doesn't exist, create a new CandidateSkills with this data.
     * 
    **/
    create: XOR<CandidateSkillsCreateInput, CandidateSkillsUncheckedCreateInput>
    /**
     * In case the CandidateSkills was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CandidateSkillsUpdateInput, CandidateSkillsUncheckedUpdateInput>
  }


  /**
   * CandidateSkills delete
   */
  export type CandidateSkillsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
    /**
     * Filter which CandidateSkills to delete.
     * 
    **/
    where: CandidateSkillsWhereUniqueInput
  }


  /**
   * CandidateSkills deleteMany
   */
  export type CandidateSkillsDeleteManyArgs = {
    /**
     * Filter which CandidateSkills to delete
     * 
    **/
    where?: CandidateSkillsWhereInput
  }


  /**
   * CandidateSkills without action
   */
  export type CandidateSkillsArgs = {
    /**
     * Select specific fields to fetch from the CandidateSkills
     * 
    **/
    select?: CandidateSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSkillsInclude | null
  }



  /**
   * Model EmployeeSkills
   */


  export type AggregateEmployeeSkills = {
    _count: EmployeeSkillsCountAggregateOutputType | null
    _avg: EmployeeSkillsAvgAggregateOutputType | null
    _sum: EmployeeSkillsSumAggregateOutputType | null
    _min: EmployeeSkillsMinAggregateOutputType | null
    _max: EmployeeSkillsMaxAggregateOutputType | null
  }

  export type EmployeeSkillsAvgAggregateOutputType = {
    employeeId: number | null
    skillId: number | null
    value: number | null
  }

  export type EmployeeSkillsSumAggregateOutputType = {
    employeeId: number | null
    skillId: number | null
    value: number | null
  }

  export type EmployeeSkillsMinAggregateOutputType = {
    employeeId: number | null
    skillId: number | null
    value: number | null
  }

  export type EmployeeSkillsMaxAggregateOutputType = {
    employeeId: number | null
    skillId: number | null
    value: number | null
  }

  export type EmployeeSkillsCountAggregateOutputType = {
    employeeId: number
    skillId: number
    value: number
    _all: number
  }


  export type EmployeeSkillsAvgAggregateInputType = {
    employeeId?: true
    skillId?: true
    value?: true
  }

  export type EmployeeSkillsSumAggregateInputType = {
    employeeId?: true
    skillId?: true
    value?: true
  }

  export type EmployeeSkillsMinAggregateInputType = {
    employeeId?: true
    skillId?: true
    value?: true
  }

  export type EmployeeSkillsMaxAggregateInputType = {
    employeeId?: true
    skillId?: true
    value?: true
  }

  export type EmployeeSkillsCountAggregateInputType = {
    employeeId?: true
    skillId?: true
    value?: true
    _all?: true
  }

  export type EmployeeSkillsAggregateArgs = {
    /**
     * Filter which EmployeeSkills to aggregate.
     * 
    **/
    where?: EmployeeSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeSkills to fetch.
     * 
    **/
    orderBy?: Enumerable<EmployeeSkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EmployeeSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeSkills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeSkills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeSkills
    **/
    _count?: true | EmployeeSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeSkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeSkillsMaxAggregateInputType
  }

  export type GetEmployeeSkillsAggregateType<T extends EmployeeSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeSkills[P]>
      : GetScalarType<T[P], AggregateEmployeeSkills[P]>
  }




  export type EmployeeSkillsGroupByArgs = {
    where?: EmployeeSkillsWhereInput
    orderBy?: Enumerable<EmployeeSkillsOrderByWithAggregationInput>
    by: Array<EmployeeSkillsScalarFieldEnum>
    having?: EmployeeSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeSkillsCountAggregateInputType | true
    _avg?: EmployeeSkillsAvgAggregateInputType
    _sum?: EmployeeSkillsSumAggregateInputType
    _min?: EmployeeSkillsMinAggregateInputType
    _max?: EmployeeSkillsMaxAggregateInputType
  }


  export type EmployeeSkillsGroupByOutputType = {
    employeeId: number
    skillId: number
    value: number | null
    _count: EmployeeSkillsCountAggregateOutputType | null
    _avg: EmployeeSkillsAvgAggregateOutputType | null
    _sum: EmployeeSkillsSumAggregateOutputType | null
    _min: EmployeeSkillsMinAggregateOutputType | null
    _max: EmployeeSkillsMaxAggregateOutputType | null
  }

  type GetEmployeeSkillsGroupByPayload<T extends EmployeeSkillsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EmployeeSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeSkillsGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSkillsSelect = {
    employeeId?: boolean
    skillId?: boolean
    value?: boolean
    employee?: boolean | EmployeeArgs
    skill?: boolean | SkillsArgs
  }

  export type EmployeeSkillsInclude = {
    employee?: boolean | EmployeeArgs
    skill?: boolean | SkillsArgs
  }

  export type EmployeeSkillsGetPayload<
    S extends boolean | null | undefined | EmployeeSkillsArgs,
    U = keyof S
      > = S extends true
        ? EmployeeSkills
    : S extends undefined
    ? never
    : S extends EmployeeSkillsArgs | EmployeeSkillsFindManyArgs
    ?'include' extends U
    ? EmployeeSkills  & {
    [P in TrueKeys<S['include']>]:
        P extends 'employee' ? EmployeeGetPayload<S['include'][P]> :
        P extends 'skill' ? SkillsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'employee' ? EmployeeGetPayload<S['select'][P]> :
        P extends 'skill' ? SkillsGetPayload<S['select'][P]> :  P extends keyof EmployeeSkills ? EmployeeSkills[P] : never
  } 
    : EmployeeSkills
  : EmployeeSkills


  type EmployeeSkillsCountArgs = Merge<
    Omit<EmployeeSkillsFindManyArgs, 'select' | 'include'> & {
      select?: EmployeeSkillsCountAggregateInputType | true
    }
  >

  export interface EmployeeSkillsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one EmployeeSkills that matches the filter.
     * @param {EmployeeSkillsFindUniqueArgs} args - Arguments to find a EmployeeSkills
     * @example
     * // Get one EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeSkillsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmployeeSkillsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EmployeeSkills'> extends True ? CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills>, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T>>> : CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills | null >, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T> | null >>

    /**
     * Find the first EmployeeSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeSkillsFindFirstArgs} args - Arguments to find a EmployeeSkills
     * @example
     * // Get one EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeSkillsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmployeeSkillsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EmployeeSkills'> extends True ? CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills>, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T>>> : CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills | null >, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T> | null >>

    /**
     * Find zero or more EmployeeSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeSkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.findMany()
     * 
     * // Get first 10 EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.findMany({ take: 10 })
     * 
     * // Only select the `employeeId`
     * const employeeSkillsWithEmployeeIdOnly = await prisma.employeeSkills.findMany({ select: { employeeId: true } })
     * 
    **/
    findMany<T extends EmployeeSkillsFindManyArgs>(
      args?: SelectSubset<T, EmployeeSkillsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<EmployeeSkills>>, PrismaPromise<Array<EmployeeSkillsGetPayload<T>>>>

    /**
     * Create a EmployeeSkills.
     * @param {EmployeeSkillsCreateArgs} args - Arguments to create a EmployeeSkills.
     * @example
     * // Create one EmployeeSkills
     * const EmployeeSkills = await prisma.employeeSkills.create({
     *   data: {
     *     // ... data to create a EmployeeSkills
     *   }
     * })
     * 
    **/
    create<T extends EmployeeSkillsCreateArgs>(
      args: SelectSubset<T, EmployeeSkillsCreateArgs>
    ): CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills>, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T>>>

    /**
     * Create many EmployeeSkills.
     *     @param {EmployeeSkillsCreateManyArgs} args - Arguments to create many EmployeeSkills.
     *     @example
     *     // Create many EmployeeSkills
     *     const employeeSkills = await prisma.employeeSkills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmployeeSkillsCreateManyArgs>(
      args?: SelectSubset<T, EmployeeSkillsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeSkills.
     * @param {EmployeeSkillsDeleteArgs} args - Arguments to delete one EmployeeSkills.
     * @example
     * // Delete one EmployeeSkills
     * const EmployeeSkills = await prisma.employeeSkills.delete({
     *   where: {
     *     // ... filter to delete one EmployeeSkills
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeSkillsDeleteArgs>(
      args: SelectSubset<T, EmployeeSkillsDeleteArgs>
    ): CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills>, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T>>>

    /**
     * Update one EmployeeSkills.
     * @param {EmployeeSkillsUpdateArgs} args - Arguments to update one EmployeeSkills.
     * @example
     * // Update one EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeSkillsUpdateArgs>(
      args: SelectSubset<T, EmployeeSkillsUpdateArgs>
    ): CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills>, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T>>>

    /**
     * Delete zero or more EmployeeSkills.
     * @param {EmployeeSkillsDeleteManyArgs} args - Arguments to filter EmployeeSkills to delete.
     * @example
     * // Delete a few EmployeeSkills
     * const { count } = await prisma.employeeSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeSkillsDeleteManyArgs>(
      args?: SelectSubset<T, EmployeeSkillsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeSkillsUpdateManyArgs>(
      args: SelectSubset<T, EmployeeSkillsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeSkills.
     * @param {EmployeeSkillsUpsertArgs} args - Arguments to update or create a EmployeeSkills.
     * @example
     * // Update or create a EmployeeSkills
     * const employeeSkills = await prisma.employeeSkills.upsert({
     *   create: {
     *     // ... data to create a EmployeeSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeSkills we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeSkillsUpsertArgs>(
      args: SelectSubset<T, EmployeeSkillsUpsertArgs>
    ): CheckSelect<T, Prisma__EmployeeSkillsClient<EmployeeSkills>, Prisma__EmployeeSkillsClient<EmployeeSkillsGetPayload<T>>>

    /**
     * Count the number of EmployeeSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeSkillsCountArgs} args - Arguments to filter EmployeeSkills to count.
     * @example
     * // Count the number of EmployeeSkills
     * const count = await prisma.employeeSkills.count({
     *   where: {
     *     // ... the filter for the EmployeeSkills we want to count
     *   }
     * })
    **/
    count<T extends EmployeeSkillsCountArgs>(
      args?: Subset<T, EmployeeSkillsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeSkillsAggregateArgs>(args: Subset<T, EmployeeSkillsAggregateArgs>): PrismaPromise<GetEmployeeSkillsAggregateType<T>>

    /**
     * Group by EmployeeSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeSkillsGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeSkillsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmployeeSkillsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employee<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null >, Prisma__EmployeeClient<EmployeeGetPayload<T> | null >>;

    skill<T extends SkillsArgs = {}>(args?: Subset<T, SkillsArgs>): CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * EmployeeSkills findUnique
   */
  export type EmployeeSkillsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * Throw an Error if a EmployeeSkills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EmployeeSkills to fetch.
     * 
    **/
    where: EmployeeSkillsWhereUniqueInput
  }


  /**
   * EmployeeSkills findFirst
   */
  export type EmployeeSkillsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * Throw an Error if a EmployeeSkills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EmployeeSkills to fetch.
     * 
    **/
    where?: EmployeeSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeSkills to fetch.
     * 
    **/
    orderBy?: Enumerable<EmployeeSkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeSkills.
     * 
    **/
    cursor?: EmployeeSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeSkills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeSkills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeSkills.
     * 
    **/
    distinct?: Enumerable<EmployeeSkillsScalarFieldEnum>
  }


  /**
   * EmployeeSkills findMany
   */
  export type EmployeeSkillsFindManyArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * Filter, which EmployeeSkills to fetch.
     * 
    **/
    where?: EmployeeSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeSkills to fetch.
     * 
    **/
    orderBy?: Enumerable<EmployeeSkillsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeSkills.
     * 
    **/
    cursor?: EmployeeSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeSkills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeSkills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EmployeeSkillsScalarFieldEnum>
  }


  /**
   * EmployeeSkills create
   */
  export type EmployeeSkillsCreateArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * The data needed to create a EmployeeSkills.
     * 
    **/
    data: XOR<EmployeeSkillsCreateInput, EmployeeSkillsUncheckedCreateInput>
  }


  /**
   * EmployeeSkills createMany
   */
  export type EmployeeSkillsCreateManyArgs = {
    /**
     * The data used to create many EmployeeSkills.
     * 
    **/
    data: Enumerable<EmployeeSkillsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EmployeeSkills update
   */
  export type EmployeeSkillsUpdateArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * The data needed to update a EmployeeSkills.
     * 
    **/
    data: XOR<EmployeeSkillsUpdateInput, EmployeeSkillsUncheckedUpdateInput>
    /**
     * Choose, which EmployeeSkills to update.
     * 
    **/
    where: EmployeeSkillsWhereUniqueInput
  }


  /**
   * EmployeeSkills updateMany
   */
  export type EmployeeSkillsUpdateManyArgs = {
    /**
     * The data used to update EmployeeSkills.
     * 
    **/
    data: XOR<EmployeeSkillsUpdateManyMutationInput, EmployeeSkillsUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeSkills to update
     * 
    **/
    where?: EmployeeSkillsWhereInput
  }


  /**
   * EmployeeSkills upsert
   */
  export type EmployeeSkillsUpsertArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * The filter to search for the EmployeeSkills to update in case it exists.
     * 
    **/
    where: EmployeeSkillsWhereUniqueInput
    /**
     * In case the EmployeeSkills found by the `where` argument doesn't exist, create a new EmployeeSkills with this data.
     * 
    **/
    create: XOR<EmployeeSkillsCreateInput, EmployeeSkillsUncheckedCreateInput>
    /**
     * In case the EmployeeSkills was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EmployeeSkillsUpdateInput, EmployeeSkillsUncheckedUpdateInput>
  }


  /**
   * EmployeeSkills delete
   */
  export type EmployeeSkillsDeleteArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
    /**
     * Filter which EmployeeSkills to delete.
     * 
    **/
    where: EmployeeSkillsWhereUniqueInput
  }


  /**
   * EmployeeSkills deleteMany
   */
  export type EmployeeSkillsDeleteManyArgs = {
    /**
     * Filter which EmployeeSkills to delete
     * 
    **/
    where?: EmployeeSkillsWhereInput
  }


  /**
   * EmployeeSkills without action
   */
  export type EmployeeSkillsArgs = {
    /**
     * Select specific fields to fetch from the EmployeeSkills
     * 
    **/
    select?: EmployeeSkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmployeeSkillsInclude | null
  }



  /**
   * Model CandidateSocial
   */


  export type AggregateCandidateSocial = {
    _count: CandidateSocialCountAggregateOutputType | null
    _avg: CandidateSocialAvgAggregateOutputType | null
    _sum: CandidateSocialSumAggregateOutputType | null
    _min: CandidateSocialMinAggregateOutputType | null
    _max: CandidateSocialMaxAggregateOutputType | null
  }

  export type CandidateSocialAvgAggregateOutputType = {
    id: number | null
    candidateId: number | null
  }

  export type CandidateSocialSumAggregateOutputType = {
    id: number | null
    candidateId: number | null
  }

  export type CandidateSocialMinAggregateOutputType = {
    id: number | null
    name: string | null
    candidateId: number | null
    url: string | null
  }

  export type CandidateSocialMaxAggregateOutputType = {
    id: number | null
    name: string | null
    candidateId: number | null
    url: string | null
  }

  export type CandidateSocialCountAggregateOutputType = {
    id: number
    name: number
    candidateId: number
    url: number
    _all: number
  }


  export type CandidateSocialAvgAggregateInputType = {
    id?: true
    candidateId?: true
  }

  export type CandidateSocialSumAggregateInputType = {
    id?: true
    candidateId?: true
  }

  export type CandidateSocialMinAggregateInputType = {
    id?: true
    name?: true
    candidateId?: true
    url?: true
  }

  export type CandidateSocialMaxAggregateInputType = {
    id?: true
    name?: true
    candidateId?: true
    url?: true
  }

  export type CandidateSocialCountAggregateInputType = {
    id?: true
    name?: true
    candidateId?: true
    url?: true
    _all?: true
  }

  export type CandidateSocialAggregateArgs = {
    /**
     * Filter which CandidateSocial to aggregate.
     * 
    **/
    where?: CandidateSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateSocials to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateSocialOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CandidateSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateSocials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateSocials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateSocials
    **/
    _count?: true | CandidateSocialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateSocialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSocialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateSocialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateSocialMaxAggregateInputType
  }

  export type GetCandidateSocialAggregateType<T extends CandidateSocialAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateSocial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateSocial[P]>
      : GetScalarType<T[P], AggregateCandidateSocial[P]>
  }




  export type CandidateSocialGroupByArgs = {
    where?: CandidateSocialWhereInput
    orderBy?: Enumerable<CandidateSocialOrderByWithAggregationInput>
    by: Array<CandidateSocialScalarFieldEnum>
    having?: CandidateSocialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateSocialCountAggregateInputType | true
    _avg?: CandidateSocialAvgAggregateInputType
    _sum?: CandidateSocialSumAggregateInputType
    _min?: CandidateSocialMinAggregateInputType
    _max?: CandidateSocialMaxAggregateInputType
  }


  export type CandidateSocialGroupByOutputType = {
    id: number
    name: string
    candidateId: number
    url: string
    _count: CandidateSocialCountAggregateOutputType | null
    _avg: CandidateSocialAvgAggregateOutputType | null
    _sum: CandidateSocialSumAggregateOutputType | null
    _min: CandidateSocialMinAggregateOutputType | null
    _max: CandidateSocialMaxAggregateOutputType | null
  }

  type GetCandidateSocialGroupByPayload<T extends CandidateSocialGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CandidateSocialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateSocialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateSocialGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateSocialGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSocialSelect = {
    id?: boolean
    name?: boolean
    candidateId?: boolean
    url?: boolean
    candidate?: boolean | CandidateArgs
  }

  export type CandidateSocialInclude = {
    candidate?: boolean | CandidateArgs
  }

  export type CandidateSocialGetPayload<
    S extends boolean | null | undefined | CandidateSocialArgs,
    U = keyof S
      > = S extends true
        ? CandidateSocial
    : S extends undefined
    ? never
    : S extends CandidateSocialArgs | CandidateSocialFindManyArgs
    ?'include' extends U
    ? CandidateSocial  & {
    [P in TrueKeys<S['include']>]:
        P extends 'candidate' ? CandidateGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'candidate' ? CandidateGetPayload<S['select'][P]> :  P extends keyof CandidateSocial ? CandidateSocial[P] : never
  } 
    : CandidateSocial
  : CandidateSocial


  type CandidateSocialCountArgs = Merge<
    Omit<CandidateSocialFindManyArgs, 'select' | 'include'> & {
      select?: CandidateSocialCountAggregateInputType | true
    }
  >

  export interface CandidateSocialDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CandidateSocial that matches the filter.
     * @param {CandidateSocialFindUniqueArgs} args - Arguments to find a CandidateSocial
     * @example
     * // Get one CandidateSocial
     * const candidateSocial = await prisma.candidateSocial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateSocialFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidateSocialFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CandidateSocial'> extends True ? CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial>, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T>>> : CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial | null >, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T> | null >>

    /**
     * Find the first CandidateSocial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSocialFindFirstArgs} args - Arguments to find a CandidateSocial
     * @example
     * // Get one CandidateSocial
     * const candidateSocial = await prisma.candidateSocial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateSocialFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidateSocialFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CandidateSocial'> extends True ? CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial>, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T>>> : CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial | null >, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T> | null >>

    /**
     * Find zero or more CandidateSocials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSocialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateSocials
     * const candidateSocials = await prisma.candidateSocial.findMany()
     * 
     * // Get first 10 CandidateSocials
     * const candidateSocials = await prisma.candidateSocial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateSocialWithIdOnly = await prisma.candidateSocial.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CandidateSocialFindManyArgs>(
      args?: SelectSubset<T, CandidateSocialFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CandidateSocial>>, PrismaPromise<Array<CandidateSocialGetPayload<T>>>>

    /**
     * Create a CandidateSocial.
     * @param {CandidateSocialCreateArgs} args - Arguments to create a CandidateSocial.
     * @example
     * // Create one CandidateSocial
     * const CandidateSocial = await prisma.candidateSocial.create({
     *   data: {
     *     // ... data to create a CandidateSocial
     *   }
     * })
     * 
    **/
    create<T extends CandidateSocialCreateArgs>(
      args: SelectSubset<T, CandidateSocialCreateArgs>
    ): CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial>, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T>>>

    /**
     * Create many CandidateSocials.
     *     @param {CandidateSocialCreateManyArgs} args - Arguments to create many CandidateSocials.
     *     @example
     *     // Create many CandidateSocials
     *     const candidateSocial = await prisma.candidateSocial.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidateSocialCreateManyArgs>(
      args?: SelectSubset<T, CandidateSocialCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CandidateSocial.
     * @param {CandidateSocialDeleteArgs} args - Arguments to delete one CandidateSocial.
     * @example
     * // Delete one CandidateSocial
     * const CandidateSocial = await prisma.candidateSocial.delete({
     *   where: {
     *     // ... filter to delete one CandidateSocial
     *   }
     * })
     * 
    **/
    delete<T extends CandidateSocialDeleteArgs>(
      args: SelectSubset<T, CandidateSocialDeleteArgs>
    ): CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial>, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T>>>

    /**
     * Update one CandidateSocial.
     * @param {CandidateSocialUpdateArgs} args - Arguments to update one CandidateSocial.
     * @example
     * // Update one CandidateSocial
     * const candidateSocial = await prisma.candidateSocial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateSocialUpdateArgs>(
      args: SelectSubset<T, CandidateSocialUpdateArgs>
    ): CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial>, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T>>>

    /**
     * Delete zero or more CandidateSocials.
     * @param {CandidateSocialDeleteManyArgs} args - Arguments to filter CandidateSocials to delete.
     * @example
     * // Delete a few CandidateSocials
     * const { count } = await prisma.candidateSocial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateSocialDeleteManyArgs>(
      args?: SelectSubset<T, CandidateSocialDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateSocials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSocialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateSocials
     * const candidateSocial = await prisma.candidateSocial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateSocialUpdateManyArgs>(
      args: SelectSubset<T, CandidateSocialUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidateSocial.
     * @param {CandidateSocialUpsertArgs} args - Arguments to update or create a CandidateSocial.
     * @example
     * // Update or create a CandidateSocial
     * const candidateSocial = await prisma.candidateSocial.upsert({
     *   create: {
     *     // ... data to create a CandidateSocial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateSocial we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateSocialUpsertArgs>(
      args: SelectSubset<T, CandidateSocialUpsertArgs>
    ): CheckSelect<T, Prisma__CandidateSocialClient<CandidateSocial>, Prisma__CandidateSocialClient<CandidateSocialGetPayload<T>>>

    /**
     * Count the number of CandidateSocials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSocialCountArgs} args - Arguments to filter CandidateSocials to count.
     * @example
     * // Count the number of CandidateSocials
     * const count = await prisma.candidateSocial.count({
     *   where: {
     *     // ... the filter for the CandidateSocials we want to count
     *   }
     * })
    **/
    count<T extends CandidateSocialCountArgs>(
      args?: Subset<T, CandidateSocialCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateSocialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateSocial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSocialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateSocialAggregateArgs>(args: Subset<T, CandidateSocialAggregateArgs>): PrismaPromise<GetCandidateSocialAggregateType<T>>

    /**
     * Group by CandidateSocial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateSocialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateSocialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateSocialGroupByArgs['orderBy'] }
        : { orderBy?: CandidateSocialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateSocialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateSocialGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateSocial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidateSocialClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CandidateSocial findUnique
   */
  export type CandidateSocialFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * Throw an Error if a CandidateSocial can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CandidateSocial to fetch.
     * 
    **/
    where: CandidateSocialWhereUniqueInput
  }


  /**
   * CandidateSocial findFirst
   */
  export type CandidateSocialFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * Throw an Error if a CandidateSocial can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CandidateSocial to fetch.
     * 
    **/
    where?: CandidateSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateSocials to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateSocialOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateSocials.
     * 
    **/
    cursor?: CandidateSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateSocials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateSocials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateSocials.
     * 
    **/
    distinct?: Enumerable<CandidateSocialScalarFieldEnum>
  }


  /**
   * CandidateSocial findMany
   */
  export type CandidateSocialFindManyArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * Filter, which CandidateSocials to fetch.
     * 
    **/
    where?: CandidateSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateSocials to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateSocialOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateSocials.
     * 
    **/
    cursor?: CandidateSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateSocials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateSocials.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CandidateSocialScalarFieldEnum>
  }


  /**
   * CandidateSocial create
   */
  export type CandidateSocialCreateArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * The data needed to create a CandidateSocial.
     * 
    **/
    data: XOR<CandidateSocialCreateInput, CandidateSocialUncheckedCreateInput>
  }


  /**
   * CandidateSocial createMany
   */
  export type CandidateSocialCreateManyArgs = {
    /**
     * The data used to create many CandidateSocials.
     * 
    **/
    data: Enumerable<CandidateSocialCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CandidateSocial update
   */
  export type CandidateSocialUpdateArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * The data needed to update a CandidateSocial.
     * 
    **/
    data: XOR<CandidateSocialUpdateInput, CandidateSocialUncheckedUpdateInput>
    /**
     * Choose, which CandidateSocial to update.
     * 
    **/
    where: CandidateSocialWhereUniqueInput
  }


  /**
   * CandidateSocial updateMany
   */
  export type CandidateSocialUpdateManyArgs = {
    /**
     * The data used to update CandidateSocials.
     * 
    **/
    data: XOR<CandidateSocialUpdateManyMutationInput, CandidateSocialUncheckedUpdateManyInput>
    /**
     * Filter which CandidateSocials to update
     * 
    **/
    where?: CandidateSocialWhereInput
  }


  /**
   * CandidateSocial upsert
   */
  export type CandidateSocialUpsertArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * The filter to search for the CandidateSocial to update in case it exists.
     * 
    **/
    where: CandidateSocialWhereUniqueInput
    /**
     * In case the CandidateSocial found by the `where` argument doesn't exist, create a new CandidateSocial with this data.
     * 
    **/
    create: XOR<CandidateSocialCreateInput, CandidateSocialUncheckedCreateInput>
    /**
     * In case the CandidateSocial was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CandidateSocialUpdateInput, CandidateSocialUncheckedUpdateInput>
  }


  /**
   * CandidateSocial delete
   */
  export type CandidateSocialDeleteArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
    /**
     * Filter which CandidateSocial to delete.
     * 
    **/
    where: CandidateSocialWhereUniqueInput
  }


  /**
   * CandidateSocial deleteMany
   */
  export type CandidateSocialDeleteManyArgs = {
    /**
     * Filter which CandidateSocials to delete
     * 
    **/
    where?: CandidateSocialWhereInput
  }


  /**
   * CandidateSocial without action
   */
  export type CandidateSocialArgs = {
    /**
     * Select specific fields to fetch from the CandidateSocial
     * 
    **/
    select?: CandidateSocialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateSocialInclude | null
  }



  /**
   * Model CandidateForJobs
   */


  export type AggregateCandidateForJobs = {
    _count: CandidateForJobsCountAggregateOutputType | null
    _avg: CandidateForJobsAvgAggregateOutputType | null
    _sum: CandidateForJobsSumAggregateOutputType | null
    _min: CandidateForJobsMinAggregateOutputType | null
    _max: CandidateForJobsMaxAggregateOutputType | null
  }

  export type CandidateForJobsAvgAggregateOutputType = {
    candidateId: number | null
    jobId: number | null
  }

  export type CandidateForJobsSumAggregateOutputType = {
    candidateId: number | null
    jobId: number | null
  }

  export type CandidateForJobsMinAggregateOutputType = {
    candidateId: number | null
    jobId: number | null
    stage: string | null
    preOnboarding: string | null
    dateApplied: Date | null
  }

  export type CandidateForJobsMaxAggregateOutputType = {
    candidateId: number | null
    jobId: number | null
    stage: string | null
    preOnboarding: string | null
    dateApplied: Date | null
  }

  export type CandidateForJobsCountAggregateOutputType = {
    candidateId: number
    jobId: number
    stage: number
    preOnboarding: number
    dateApplied: number
    _all: number
  }


  export type CandidateForJobsAvgAggregateInputType = {
    candidateId?: true
    jobId?: true
  }

  export type CandidateForJobsSumAggregateInputType = {
    candidateId?: true
    jobId?: true
  }

  export type CandidateForJobsMinAggregateInputType = {
    candidateId?: true
    jobId?: true
    stage?: true
    preOnboarding?: true
    dateApplied?: true
  }

  export type CandidateForJobsMaxAggregateInputType = {
    candidateId?: true
    jobId?: true
    stage?: true
    preOnboarding?: true
    dateApplied?: true
  }

  export type CandidateForJobsCountAggregateInputType = {
    candidateId?: true
    jobId?: true
    stage?: true
    preOnboarding?: true
    dateApplied?: true
    _all?: true
  }

  export type CandidateForJobsAggregateArgs = {
    /**
     * Filter which CandidateForJobs to aggregate.
     * 
    **/
    where?: CandidateForJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateForJobs to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateForJobsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CandidateForJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateForJobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateForJobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateForJobs
    **/
    _count?: true | CandidateForJobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateForJobsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateForJobsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateForJobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateForJobsMaxAggregateInputType
  }

  export type GetCandidateForJobsAggregateType<T extends CandidateForJobsAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateForJobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateForJobs[P]>
      : GetScalarType<T[P], AggregateCandidateForJobs[P]>
  }




  export type CandidateForJobsGroupByArgs = {
    where?: CandidateForJobsWhereInput
    orderBy?: Enumerable<CandidateForJobsOrderByWithAggregationInput>
    by: Array<CandidateForJobsScalarFieldEnum>
    having?: CandidateForJobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateForJobsCountAggregateInputType | true
    _avg?: CandidateForJobsAvgAggregateInputType
    _sum?: CandidateForJobsSumAggregateInputType
    _min?: CandidateForJobsMinAggregateInputType
    _max?: CandidateForJobsMaxAggregateInputType
  }


  export type CandidateForJobsGroupByOutputType = {
    candidateId: number
    jobId: number
    stage: string
    preOnboarding: string | null
    dateApplied: Date
    _count: CandidateForJobsCountAggregateOutputType | null
    _avg: CandidateForJobsAvgAggregateOutputType | null
    _sum: CandidateForJobsSumAggregateOutputType | null
    _min: CandidateForJobsMinAggregateOutputType | null
    _max: CandidateForJobsMaxAggregateOutputType | null
  }

  type GetCandidateForJobsGroupByPayload<T extends CandidateForJobsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CandidateForJobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateForJobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateForJobsGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateForJobsGroupByOutputType[P]>
        }
      >
    >


  export type CandidateForJobsSelect = {
    candidateId?: boolean
    jobId?: boolean
    stage?: boolean
    preOnboarding?: boolean
    dateApplied?: boolean
    candidate?: boolean | CandidateArgs
    job?: boolean | JobArgs
  }

  export type CandidateForJobsInclude = {
    candidate?: boolean | CandidateArgs
    job?: boolean | JobArgs
  }

  export type CandidateForJobsGetPayload<
    S extends boolean | null | undefined | CandidateForJobsArgs,
    U = keyof S
      > = S extends true
        ? CandidateForJobs
    : S extends undefined
    ? never
    : S extends CandidateForJobsArgs | CandidateForJobsFindManyArgs
    ?'include' extends U
    ? CandidateForJobs  & {
    [P in TrueKeys<S['include']>]:
        P extends 'candidate' ? CandidateGetPayload<S['include'][P]> :
        P extends 'job' ? JobGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'candidate' ? CandidateGetPayload<S['select'][P]> :
        P extends 'job' ? JobGetPayload<S['select'][P]> :  P extends keyof CandidateForJobs ? CandidateForJobs[P] : never
  } 
    : CandidateForJobs
  : CandidateForJobs


  type CandidateForJobsCountArgs = Merge<
    Omit<CandidateForJobsFindManyArgs, 'select' | 'include'> & {
      select?: CandidateForJobsCountAggregateInputType | true
    }
  >

  export interface CandidateForJobsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CandidateForJobs that matches the filter.
     * @param {CandidateForJobsFindUniqueArgs} args - Arguments to find a CandidateForJobs
     * @example
     * // Get one CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateForJobsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidateForJobsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CandidateForJobs'> extends True ? CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs>, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T>>> : CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs | null >, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T> | null >>

    /**
     * Find the first CandidateForJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateForJobsFindFirstArgs} args - Arguments to find a CandidateForJobs
     * @example
     * // Get one CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateForJobsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidateForJobsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CandidateForJobs'> extends True ? CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs>, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T>>> : CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs | null >, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T> | null >>

    /**
     * Find zero or more CandidateForJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateForJobsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.findMany()
     * 
     * // Get first 10 CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.findMany({ take: 10 })
     * 
     * // Only select the `candidateId`
     * const candidateForJobsWithCandidateIdOnly = await prisma.candidateForJobs.findMany({ select: { candidateId: true } })
     * 
    **/
    findMany<T extends CandidateForJobsFindManyArgs>(
      args?: SelectSubset<T, CandidateForJobsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CandidateForJobs>>, PrismaPromise<Array<CandidateForJobsGetPayload<T>>>>

    /**
     * Create a CandidateForJobs.
     * @param {CandidateForJobsCreateArgs} args - Arguments to create a CandidateForJobs.
     * @example
     * // Create one CandidateForJobs
     * const CandidateForJobs = await prisma.candidateForJobs.create({
     *   data: {
     *     // ... data to create a CandidateForJobs
     *   }
     * })
     * 
    **/
    create<T extends CandidateForJobsCreateArgs>(
      args: SelectSubset<T, CandidateForJobsCreateArgs>
    ): CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs>, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T>>>

    /**
     * Create many CandidateForJobs.
     *     @param {CandidateForJobsCreateManyArgs} args - Arguments to create many CandidateForJobs.
     *     @example
     *     // Create many CandidateForJobs
     *     const candidateForJobs = await prisma.candidateForJobs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidateForJobsCreateManyArgs>(
      args?: SelectSubset<T, CandidateForJobsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CandidateForJobs.
     * @param {CandidateForJobsDeleteArgs} args - Arguments to delete one CandidateForJobs.
     * @example
     * // Delete one CandidateForJobs
     * const CandidateForJobs = await prisma.candidateForJobs.delete({
     *   where: {
     *     // ... filter to delete one CandidateForJobs
     *   }
     * })
     * 
    **/
    delete<T extends CandidateForJobsDeleteArgs>(
      args: SelectSubset<T, CandidateForJobsDeleteArgs>
    ): CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs>, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T>>>

    /**
     * Update one CandidateForJobs.
     * @param {CandidateForJobsUpdateArgs} args - Arguments to update one CandidateForJobs.
     * @example
     * // Update one CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateForJobsUpdateArgs>(
      args: SelectSubset<T, CandidateForJobsUpdateArgs>
    ): CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs>, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T>>>

    /**
     * Delete zero or more CandidateForJobs.
     * @param {CandidateForJobsDeleteManyArgs} args - Arguments to filter CandidateForJobs to delete.
     * @example
     * // Delete a few CandidateForJobs
     * const { count } = await prisma.candidateForJobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateForJobsDeleteManyArgs>(
      args?: SelectSubset<T, CandidateForJobsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateForJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateForJobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateForJobsUpdateManyArgs>(
      args: SelectSubset<T, CandidateForJobsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidateForJobs.
     * @param {CandidateForJobsUpsertArgs} args - Arguments to update or create a CandidateForJobs.
     * @example
     * // Update or create a CandidateForJobs
     * const candidateForJobs = await prisma.candidateForJobs.upsert({
     *   create: {
     *     // ... data to create a CandidateForJobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateForJobs we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateForJobsUpsertArgs>(
      args: SelectSubset<T, CandidateForJobsUpsertArgs>
    ): CheckSelect<T, Prisma__CandidateForJobsClient<CandidateForJobs>, Prisma__CandidateForJobsClient<CandidateForJobsGetPayload<T>>>

    /**
     * Count the number of CandidateForJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateForJobsCountArgs} args - Arguments to filter CandidateForJobs to count.
     * @example
     * // Count the number of CandidateForJobs
     * const count = await prisma.candidateForJobs.count({
     *   where: {
     *     // ... the filter for the CandidateForJobs we want to count
     *   }
     * })
    **/
    count<T extends CandidateForJobsCountArgs>(
      args?: Subset<T, CandidateForJobsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateForJobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateForJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateForJobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateForJobsAggregateArgs>(args: Subset<T, CandidateForJobsAggregateArgs>): PrismaPromise<GetCandidateForJobsAggregateType<T>>

    /**
     * Group by CandidateForJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateForJobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateForJobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateForJobsGroupByArgs['orderBy'] }
        : { orderBy?: CandidateForJobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateForJobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateForJobsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateForJobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidateForJobsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidate<T extends CandidateArgs = {}>(args?: Subset<T, CandidateArgs>): CheckSelect<T, Prisma__CandidateClient<Candidate | null >, Prisma__CandidateClient<CandidateGetPayload<T> | null >>;

    job<T extends JobArgs = {}>(args?: Subset<T, JobArgs>): CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CandidateForJobs findUnique
   */
  export type CandidateForJobsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * Throw an Error if a CandidateForJobs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CandidateForJobs to fetch.
     * 
    **/
    where: CandidateForJobsWhereUniqueInput
  }


  /**
   * CandidateForJobs findFirst
   */
  export type CandidateForJobsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * Throw an Error if a CandidateForJobs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CandidateForJobs to fetch.
     * 
    **/
    where?: CandidateForJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateForJobs to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateForJobsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateForJobs.
     * 
    **/
    cursor?: CandidateForJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateForJobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateForJobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateForJobs.
     * 
    **/
    distinct?: Enumerable<CandidateForJobsScalarFieldEnum>
  }


  /**
   * CandidateForJobs findMany
   */
  export type CandidateForJobsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * Filter, which CandidateForJobs to fetch.
     * 
    **/
    where?: CandidateForJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateForJobs to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidateForJobsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateForJobs.
     * 
    **/
    cursor?: CandidateForJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateForJobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateForJobs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CandidateForJobsScalarFieldEnum>
  }


  /**
   * CandidateForJobs create
   */
  export type CandidateForJobsCreateArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * The data needed to create a CandidateForJobs.
     * 
    **/
    data: XOR<CandidateForJobsCreateInput, CandidateForJobsUncheckedCreateInput>
  }


  /**
   * CandidateForJobs createMany
   */
  export type CandidateForJobsCreateManyArgs = {
    /**
     * The data used to create many CandidateForJobs.
     * 
    **/
    data: Enumerable<CandidateForJobsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CandidateForJobs update
   */
  export type CandidateForJobsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * The data needed to update a CandidateForJobs.
     * 
    **/
    data: XOR<CandidateForJobsUpdateInput, CandidateForJobsUncheckedUpdateInput>
    /**
     * Choose, which CandidateForJobs to update.
     * 
    **/
    where: CandidateForJobsWhereUniqueInput
  }


  /**
   * CandidateForJobs updateMany
   */
  export type CandidateForJobsUpdateManyArgs = {
    /**
     * The data used to update CandidateForJobs.
     * 
    **/
    data: XOR<CandidateForJobsUpdateManyMutationInput, CandidateForJobsUncheckedUpdateManyInput>
    /**
     * Filter which CandidateForJobs to update
     * 
    **/
    where?: CandidateForJobsWhereInput
  }


  /**
   * CandidateForJobs upsert
   */
  export type CandidateForJobsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * The filter to search for the CandidateForJobs to update in case it exists.
     * 
    **/
    where: CandidateForJobsWhereUniqueInput
    /**
     * In case the CandidateForJobs found by the `where` argument doesn't exist, create a new CandidateForJobs with this data.
     * 
    **/
    create: XOR<CandidateForJobsCreateInput, CandidateForJobsUncheckedCreateInput>
    /**
     * In case the CandidateForJobs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CandidateForJobsUpdateInput, CandidateForJobsUncheckedUpdateInput>
  }


  /**
   * CandidateForJobs delete
   */
  export type CandidateForJobsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
    /**
     * Filter which CandidateForJobs to delete.
     * 
    **/
    where: CandidateForJobsWhereUniqueInput
  }


  /**
   * CandidateForJobs deleteMany
   */
  export type CandidateForJobsDeleteManyArgs = {
    /**
     * Filter which CandidateForJobs to delete
     * 
    **/
    where?: CandidateForJobsWhereInput
  }


  /**
   * CandidateForJobs without action
   */
  export type CandidateForJobsArgs = {
    /**
     * Select specific fields to fetch from the CandidateForJobs
     * 
    **/
    select?: CandidateForJobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidateForJobsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EmployeeScalarFieldEnum: {
    id: 'id',
    password: 'password',
    email: 'email',
    name: 'name',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    empType: 'empType',
    jobType: 'jobType',
    experience: 'experience',
    designation: 'designation',
    profilePicture: 'profilePicture',
    profilePicKey: 'profilePicKey'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    city: 'city',
    country: 'country',
    phone: 'phone',
    name: 'name',
    social: 'social',
    profilePicture: 'profilePicture',
    profilePicKey: 'profilePicKey',
    resume: 'resume',
    resumeKey: 'resumeKey',
    source: 'source',
    currJobTitle: 'currJobTitle',
    qualification: 'qualification',
    expectedSalary: 'expectedSalary',
    expectedSalaryUnit: 'expectedSalaryUnit',
    currentSalary: 'currentSalary',
    currentSalaryUnit: 'currentSalaryUnit',
    experience: 'experience',
    info: 'info',
    website: 'website'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const SkillsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SkillsScalarFieldEnum = (typeof SkillsScalarFieldEnum)[keyof typeof SkillsScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    experienceStartRng: 'experienceStartRng',
    experienceEndRng: 'experienceEndRng',
    salaryStartRng: 'salaryStartRng',
    salaryEndRng: 'salaryEndRng',
    createdAt: 'createdAt',
    closedAt: 'closedAt',
    assignedTo: 'assignedTo',
    status: 'status',
    description: 'description',
    opening: 'opening',
    filled: 'filled',
    active: 'active',
    contacting: 'contacting',
    archived: 'archived',
    department: 'department',
    jobReq: 'jobReq',
    jobRes: 'jobRes',
    city: 'city',
    keywords: 'keywords',
    type: 'type'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const NewsletterScalarFieldEnum: {
    id: 'id',
    email: 'email'
  };

  export type NewsletterScalarFieldEnum = (typeof NewsletterScalarFieldEnum)[keyof typeof NewsletterScalarFieldEnum]


  export const InterviewRoundScalarFieldEnum: {
    id: 'id',
    title: 'title',
    interviewerId: 'interviewerId',
    candidateId: 'candidateId',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    url: 'url',
    feedback: 'feedback'
  };

  export type InterviewRoundScalarFieldEnum = (typeof InterviewRoundScalarFieldEnum)[keyof typeof InterviewRoundScalarFieldEnum]


  export const CandidateSkillsScalarFieldEnum: {
    candidateId: 'candidateId',
    skillId: 'skillId',
    value: 'value'
  };

  export type CandidateSkillsScalarFieldEnum = (typeof CandidateSkillsScalarFieldEnum)[keyof typeof CandidateSkillsScalarFieldEnum]


  export const EmployeeSkillsScalarFieldEnum: {
    employeeId: 'employeeId',
    skillId: 'skillId',
    value: 'value'
  };

  export type EmployeeSkillsScalarFieldEnum = (typeof EmployeeSkillsScalarFieldEnum)[keyof typeof EmployeeSkillsScalarFieldEnum]


  export const CandidateSocialScalarFieldEnum: {
    id: 'id',
    name: 'name',
    candidateId: 'candidateId',
    url: 'url'
  };

  export type CandidateSocialScalarFieldEnum = (typeof CandidateSocialScalarFieldEnum)[keyof typeof CandidateSocialScalarFieldEnum]


  export const CandidateForJobsScalarFieldEnum: {
    candidateId: 'candidateId',
    jobId: 'jobId',
    stage: 'stage',
    preOnboarding: 'preOnboarding',
    dateApplied: 'dateApplied'
  };

  export type CandidateForJobsScalarFieldEnum = (typeof CandidateForJobsScalarFieldEnum)[keyof typeof CandidateForJobsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const EmployeeOrderByRelevanceFieldEnum: {
    password: 'password',
    email: 'email',
    name: 'name',
    empType: 'empType',
    jobType: 'jobType',
    designation: 'designation',
    profilePicture: 'profilePicture',
    profilePicKey: 'profilePicKey'
  };

  export type EmployeeOrderByRelevanceFieldEnum = (typeof EmployeeOrderByRelevanceFieldEnum)[keyof typeof EmployeeOrderByRelevanceFieldEnum]


  export const CandidateOrderByRelevanceFieldEnum: {
    email: 'email',
    city: 'city',
    country: 'country',
    name: 'name',
    social: 'social',
    profilePicture: 'profilePicture',
    profilePicKey: 'profilePicKey',
    resume: 'resume',
    resumeKey: 'resumeKey',
    source: 'source',
    currJobTitle: 'currJobTitle',
    qualification: 'qualification',
    expectedSalaryUnit: 'expectedSalaryUnit',
    currentSalaryUnit: 'currentSalaryUnit',
    info: 'info',
    website: 'website'
  };

  export type CandidateOrderByRelevanceFieldEnum = (typeof CandidateOrderByRelevanceFieldEnum)[keyof typeof CandidateOrderByRelevanceFieldEnum]


  export const SkillsOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type SkillsOrderByRelevanceFieldEnum = (typeof SkillsOrderByRelevanceFieldEnum)[keyof typeof SkillsOrderByRelevanceFieldEnum]


  export const JobOrderByRelevanceFieldEnum: {
    title: 'title',
    status: 'status',
    description: 'description',
    department: 'department',
    jobReq: 'jobReq',
    jobRes: 'jobRes',
    city: 'city',
    keywords: 'keywords',
    type: 'type'
  };

  export type JobOrderByRelevanceFieldEnum = (typeof JobOrderByRelevanceFieldEnum)[keyof typeof JobOrderByRelevanceFieldEnum]


  export const NewsletterOrderByRelevanceFieldEnum: {
    email: 'email'
  };

  export type NewsletterOrderByRelevanceFieldEnum = (typeof NewsletterOrderByRelevanceFieldEnum)[keyof typeof NewsletterOrderByRelevanceFieldEnum]


  export const InterviewRoundOrderByRelevanceFieldEnum: {
    title: 'title',
    url: 'url',
    feedback: 'feedback'
  };

  export type InterviewRoundOrderByRelevanceFieldEnum = (typeof InterviewRoundOrderByRelevanceFieldEnum)[keyof typeof InterviewRoundOrderByRelevanceFieldEnum]


  export const CandidateSocialOrderByRelevanceFieldEnum: {
    name: 'name',
    url: 'url'
  };

  export type CandidateSocialOrderByRelevanceFieldEnum = (typeof CandidateSocialOrderByRelevanceFieldEnum)[keyof typeof CandidateSocialOrderByRelevanceFieldEnum]


  export const CandidateForJobsOrderByRelevanceFieldEnum: {
    stage: 'stage',
    preOnboarding: 'preOnboarding'
  };

  export type CandidateForJobsOrderByRelevanceFieldEnum = (typeof CandidateForJobsOrderByRelevanceFieldEnum)[keyof typeof CandidateForJobsOrderByRelevanceFieldEnum]


  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: Enumerable<EmployeeWhereInput>
    OR?: Enumerable<EmployeeWhereInput>
    NOT?: Enumerable<EmployeeWhereInput>
    id?: IntFilter | number
    password?: StringFilter | string
    email?: StringFilter | string
    name?: StringFilter | string
    phone?: BigIntNullableFilter | bigint | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    empType?: StringFilter | string
    jobType?: StringNullableFilter | string | null
    experience?: IntNullableFilter | number | null
    designation?: StringNullableFilter | string | null
    profilePicture?: StringNullableFilter | string | null
    profilePicKey?: StringNullableFilter | string | null
    jobs?: JobListRelationFilter
    skills?: EmployeeSkillsListRelationFilter
    interviews?: InterviewRoundListRelationFilter
  }

  export type EmployeeOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    empType?: SortOrder
    jobType?: SortOrder
    experience?: SortOrder
    designation?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    jobs?: JobOrderByRelationAggregateInput
    skills?: EmployeeSkillsOrderByRelationAggregateInput
    interviews?: InterviewRoundOrderByRelationAggregateInput
    _relevance?: EmployeeOrderByRelevanceInput
  }

  export type EmployeeWhereUniqueInput = {
    id?: number
    email?: string
    phone?: bigint | number
  }

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    empType?: SortOrder
    jobType?: SortOrder
    experience?: SortOrder
    designation?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmployeeScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmployeeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmployeeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: BigIntNullableWithAggregatesFilter | bigint | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    empType?: StringWithAggregatesFilter | string
    jobType?: StringNullableWithAggregatesFilter | string | null
    experience?: IntNullableWithAggregatesFilter | number | null
    designation?: StringNullableWithAggregatesFilter | string | null
    profilePicture?: StringNullableWithAggregatesFilter | string | null
    profilePicKey?: StringNullableWithAggregatesFilter | string | null
  }

  export type CandidateWhereInput = {
    AND?: Enumerable<CandidateWhereInput>
    OR?: Enumerable<CandidateWhereInput>
    NOT?: Enumerable<CandidateWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    city?: StringNullableFilter | string | null
    country?: StringNullableFilter | string | null
    phone?: BigIntNullableFilter | bigint | number | null
    name?: StringFilter | string
    social?: StringNullableFilter | string | null
    profilePicture?: StringNullableFilter | string | null
    profilePicKey?: StringNullableFilter | string | null
    resume?: StringNullableFilter | string | null
    resumeKey?: StringNullableFilter | string | null
    source?: StringNullableFilter | string | null
    currJobTitle?: StringNullableFilter | string | null
    qualification?: StringNullableFilter | string | null
    expectedSalary?: IntNullableFilter | number | null
    expectedSalaryUnit?: StringNullableFilter | string | null
    currentSalary?: IntNullableFilter | number | null
    currentSalaryUnit?: StringNullableFilter | string | null
    experience?: IntNullableFilter | number | null
    info?: StringNullableFilter | string | null
    website?: StringNullableFilter | string | null
    appliedAt?: CandidateForJobsListRelationFilter
    skills?: CandidateSkillsListRelationFilter
    socials?: CandidateSocialListRelationFilter
    interview?: InterviewRoundListRelationFilter
  }

  export type CandidateOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    social?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    resume?: SortOrder
    resumeKey?: SortOrder
    source?: SortOrder
    currJobTitle?: SortOrder
    qualification?: SortOrder
    expectedSalary?: SortOrder
    expectedSalaryUnit?: SortOrder
    currentSalary?: SortOrder
    currentSalaryUnit?: SortOrder
    experience?: SortOrder
    info?: SortOrder
    website?: SortOrder
    appliedAt?: CandidateForJobsOrderByRelationAggregateInput
    skills?: CandidateSkillsOrderByRelationAggregateInput
    socials?: CandidateSocialOrderByRelationAggregateInput
    interview?: InterviewRoundOrderByRelationAggregateInput
    _relevance?: CandidateOrderByRelevanceInput
  }

  export type CandidateWhereUniqueInput = {
    id?: number
    email?: string
    phone?: bigint | number
  }

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    social?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    resume?: SortOrder
    resumeKey?: SortOrder
    source?: SortOrder
    currJobTitle?: SortOrder
    qualification?: SortOrder
    expectedSalary?: SortOrder
    expectedSalaryUnit?: SortOrder
    currentSalary?: SortOrder
    currentSalaryUnit?: SortOrder
    experience?: SortOrder
    info?: SortOrder
    website?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _avg?: CandidateAvgOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
    _sum?: CandidateSumOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidateScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    city?: StringNullableWithAggregatesFilter | string | null
    country?: StringNullableWithAggregatesFilter | string | null
    phone?: BigIntNullableWithAggregatesFilter | bigint | number | null
    name?: StringWithAggregatesFilter | string
    social?: StringNullableWithAggregatesFilter | string | null
    profilePicture?: StringNullableWithAggregatesFilter | string | null
    profilePicKey?: StringNullableWithAggregatesFilter | string | null
    resume?: StringNullableWithAggregatesFilter | string | null
    resumeKey?: StringNullableWithAggregatesFilter | string | null
    source?: StringNullableWithAggregatesFilter | string | null
    currJobTitle?: StringNullableWithAggregatesFilter | string | null
    qualification?: StringNullableWithAggregatesFilter | string | null
    expectedSalary?: IntNullableWithAggregatesFilter | number | null
    expectedSalaryUnit?: StringNullableWithAggregatesFilter | string | null
    currentSalary?: IntNullableWithAggregatesFilter | number | null
    currentSalaryUnit?: StringNullableWithAggregatesFilter | string | null
    experience?: IntNullableWithAggregatesFilter | number | null
    info?: StringNullableWithAggregatesFilter | string | null
    website?: StringNullableWithAggregatesFilter | string | null
  }

  export type SkillsWhereInput = {
    AND?: Enumerable<SkillsWhereInput>
    OR?: Enumerable<SkillsWhereInput>
    NOT?: Enumerable<SkillsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    candidates?: CandidateSkillsListRelationFilter
    employee?: EmployeeSkillsListRelationFilter
  }

  export type SkillsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    candidates?: CandidateSkillsOrderByRelationAggregateInput
    employee?: EmployeeSkillsOrderByRelationAggregateInput
    _relevance?: SkillsOrderByRelevanceInput
  }

  export type SkillsWhereUniqueInput = {
    id?: number
  }

  export type SkillsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SkillsCountOrderByAggregateInput
    _avg?: SkillsAvgOrderByAggregateInput
    _max?: SkillsMaxOrderByAggregateInput
    _min?: SkillsMinOrderByAggregateInput
    _sum?: SkillsSumOrderByAggregateInput
  }

  export type SkillsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type JobWhereInput = {
    AND?: Enumerable<JobWhereInput>
    OR?: Enumerable<JobWhereInput>
    NOT?: Enumerable<JobWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    experienceStartRng?: IntFilter | number
    experienceEndRng?: IntFilter | number
    salaryStartRng?: IntFilter | number
    salaryEndRng?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    closedAt?: DateTimeNullableFilter | Date | string | null
    assignedTo?: IntFilter | number
    status?: StringFilter | string
    description?: StringFilter | string
    opening?: IntFilter | number
    filled?: IntFilter | number
    active?: IntFilter | number
    contacting?: IntFilter | number
    archived?: IntFilter | number
    department?: StringFilter | string
    jobReq?: StringNullableListFilter
    jobRes?: StringNullableListFilter
    city?: StringFilter | string
    keywords?: StringNullableListFilter
    type?: StringNullableListFilter
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    appliedBy?: CandidateForJobsListRelationFilter
  }

  export type JobOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    title?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    description?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
    department?: SortOrder
    jobReq?: SortOrder
    jobRes?: SortOrder
    city?: SortOrder
    keywords?: SortOrder
    type?: SortOrder
    employee?: EmployeeOrderByWithRelationAndSearchRelevanceInput
    appliedBy?: CandidateForJobsOrderByRelationAggregateInput
    _relevance?: JobOrderByRelevanceInput
  }

  export type JobWhereUniqueInput = {
    id?: number
  }

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    description?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
    department?: SortOrder
    jobReq?: SortOrder
    jobRes?: SortOrder
    city?: SortOrder
    keywords?: SortOrder
    type?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JobScalarWhereWithAggregatesInput>
    OR?: Enumerable<JobScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JobScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    experienceStartRng?: IntWithAggregatesFilter | number
    experienceEndRng?: IntWithAggregatesFilter | number
    salaryStartRng?: IntWithAggregatesFilter | number
    salaryEndRng?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    closedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    assignedTo?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    opening?: IntWithAggregatesFilter | number
    filled?: IntWithAggregatesFilter | number
    active?: IntWithAggregatesFilter | number
    contacting?: IntWithAggregatesFilter | number
    archived?: IntWithAggregatesFilter | number
    department?: StringWithAggregatesFilter | string
    jobReq?: StringNullableListFilter
    jobRes?: StringNullableListFilter
    city?: StringWithAggregatesFilter | string
    keywords?: StringNullableListFilter
    type?: StringNullableListFilter
  }

  export type NewsletterWhereInput = {
    AND?: Enumerable<NewsletterWhereInput>
    OR?: Enumerable<NewsletterWhereInput>
    NOT?: Enumerable<NewsletterWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
  }

  export type NewsletterOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    email?: SortOrder
    _relevance?: NewsletterOrderByRelevanceInput
  }

  export type NewsletterWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type NewsletterOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    _count?: NewsletterCountOrderByAggregateInput
    _avg?: NewsletterAvgOrderByAggregateInput
    _max?: NewsletterMaxOrderByAggregateInput
    _min?: NewsletterMinOrderByAggregateInput
    _sum?: NewsletterSumOrderByAggregateInput
  }

  export type NewsletterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NewsletterScalarWhereWithAggregatesInput>
    OR?: Enumerable<NewsletterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NewsletterScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
  }

  export type InterviewRoundWhereInput = {
    AND?: Enumerable<InterviewRoundWhereInput>
    OR?: Enumerable<InterviewRoundWhereInput>
    NOT?: Enumerable<InterviewRoundWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    interviewerId?: IntFilter | number
    candidateId?: IntFilter | number
    date?: DateTimeFilter | Date | string
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    url?: StringFilter | string
    feedback?: StringNullableFilter | string | null
    interviewer?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }

  export type InterviewRoundOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    title?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    url?: SortOrder
    feedback?: SortOrder
    interviewer?: EmployeeOrderByWithRelationAndSearchRelevanceInput
    candidate?: CandidateOrderByWithRelationAndSearchRelevanceInput
    _relevance?: InterviewRoundOrderByRelevanceInput
  }

  export type InterviewRoundWhereUniqueInput = {
    id?: number
  }

  export type InterviewRoundOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    url?: SortOrder
    feedback?: SortOrder
    _count?: InterviewRoundCountOrderByAggregateInput
    _avg?: InterviewRoundAvgOrderByAggregateInput
    _max?: InterviewRoundMaxOrderByAggregateInput
    _min?: InterviewRoundMinOrderByAggregateInput
    _sum?: InterviewRoundSumOrderByAggregateInput
  }

  export type InterviewRoundScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InterviewRoundScalarWhereWithAggregatesInput>
    OR?: Enumerable<InterviewRoundScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InterviewRoundScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    interviewerId?: IntWithAggregatesFilter | number
    candidateId?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    url?: StringWithAggregatesFilter | string
    feedback?: StringNullableWithAggregatesFilter | string | null
  }

  export type CandidateSkillsWhereInput = {
    AND?: Enumerable<CandidateSkillsWhereInput>
    OR?: Enumerable<CandidateSkillsWhereInput>
    NOT?: Enumerable<CandidateSkillsWhereInput>
    candidateId?: IntFilter | number
    skillId?: IntFilter | number
    value?: IntFilter | number
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    skill?: XOR<SkillsRelationFilter, SkillsWhereInput>
  }

  export type CandidateSkillsOrderByWithRelationAndSearchRelevanceInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
    candidate?: CandidateOrderByWithRelationAndSearchRelevanceInput
    skill?: SkillsOrderByWithRelationAndSearchRelevanceInput
  }

  export type CandidateSkillsWhereUniqueInput = {
    candidateId_skillId?: CandidateSkillsCandidateIdSkillIdCompoundUniqueInput
  }

  export type CandidateSkillsOrderByWithAggregationInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
    _count?: CandidateSkillsCountOrderByAggregateInput
    _avg?: CandidateSkillsAvgOrderByAggregateInput
    _max?: CandidateSkillsMaxOrderByAggregateInput
    _min?: CandidateSkillsMinOrderByAggregateInput
    _sum?: CandidateSkillsSumOrderByAggregateInput
  }

  export type CandidateSkillsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidateSkillsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidateSkillsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidateSkillsScalarWhereWithAggregatesInput>
    candidateId?: IntWithAggregatesFilter | number
    skillId?: IntWithAggregatesFilter | number
    value?: IntWithAggregatesFilter | number
  }

  export type EmployeeSkillsWhereInput = {
    AND?: Enumerable<EmployeeSkillsWhereInput>
    OR?: Enumerable<EmployeeSkillsWhereInput>
    NOT?: Enumerable<EmployeeSkillsWhereInput>
    employeeId?: IntFilter | number
    skillId?: IntFilter | number
    value?: IntNullableFilter | number | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    skill?: XOR<SkillsRelationFilter, SkillsWhereInput>
  }

  export type EmployeeSkillsOrderByWithRelationAndSearchRelevanceInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
    employee?: EmployeeOrderByWithRelationAndSearchRelevanceInput
    skill?: SkillsOrderByWithRelationAndSearchRelevanceInput
  }

  export type EmployeeSkillsWhereUniqueInput = {
    employeeId_skillId?: EmployeeSkillsEmployeeIdSkillIdCompoundUniqueInput
  }

  export type EmployeeSkillsOrderByWithAggregationInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
    _count?: EmployeeSkillsCountOrderByAggregateInput
    _avg?: EmployeeSkillsAvgOrderByAggregateInput
    _max?: EmployeeSkillsMaxOrderByAggregateInput
    _min?: EmployeeSkillsMinOrderByAggregateInput
    _sum?: EmployeeSkillsSumOrderByAggregateInput
  }

  export type EmployeeSkillsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmployeeSkillsScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmployeeSkillsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmployeeSkillsScalarWhereWithAggregatesInput>
    employeeId?: IntWithAggregatesFilter | number
    skillId?: IntWithAggregatesFilter | number
    value?: IntNullableWithAggregatesFilter | number | null
  }

  export type CandidateSocialWhereInput = {
    AND?: Enumerable<CandidateSocialWhereInput>
    OR?: Enumerable<CandidateSocialWhereInput>
    NOT?: Enumerable<CandidateSocialWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    candidateId?: IntFilter | number
    url?: StringFilter | string
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }

  export type CandidateSocialOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    candidateId?: SortOrder
    url?: SortOrder
    candidate?: CandidateOrderByWithRelationAndSearchRelevanceInput
    _relevance?: CandidateSocialOrderByRelevanceInput
  }

  export type CandidateSocialWhereUniqueInput = {
    id?: number
  }

  export type CandidateSocialOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    candidateId?: SortOrder
    url?: SortOrder
    _count?: CandidateSocialCountOrderByAggregateInput
    _avg?: CandidateSocialAvgOrderByAggregateInput
    _max?: CandidateSocialMaxOrderByAggregateInput
    _min?: CandidateSocialMinOrderByAggregateInput
    _sum?: CandidateSocialSumOrderByAggregateInput
  }

  export type CandidateSocialScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidateSocialScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidateSocialScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidateSocialScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    candidateId?: IntWithAggregatesFilter | number
    url?: StringWithAggregatesFilter | string
  }

  export type CandidateForJobsWhereInput = {
    AND?: Enumerable<CandidateForJobsWhereInput>
    OR?: Enumerable<CandidateForJobsWhereInput>
    NOT?: Enumerable<CandidateForJobsWhereInput>
    candidateId?: IntFilter | number
    jobId?: IntFilter | number
    stage?: StringFilter | string
    preOnboarding?: StringNullableFilter | string | null
    dateApplied?: DateTimeFilter | Date | string
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
    job?: XOR<JobRelationFilter, JobWhereInput>
  }

  export type CandidateForJobsOrderByWithRelationAndSearchRelevanceInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
    stage?: SortOrder
    preOnboarding?: SortOrder
    dateApplied?: SortOrder
    candidate?: CandidateOrderByWithRelationAndSearchRelevanceInput
    job?: JobOrderByWithRelationAndSearchRelevanceInput
    _relevance?: CandidateForJobsOrderByRelevanceInput
  }

  export type CandidateForJobsWhereUniqueInput = {
    candidateId_jobId?: CandidateForJobsCandidateIdJobIdCompoundUniqueInput
  }

  export type CandidateForJobsOrderByWithAggregationInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
    stage?: SortOrder
    preOnboarding?: SortOrder
    dateApplied?: SortOrder
    _count?: CandidateForJobsCountOrderByAggregateInput
    _avg?: CandidateForJobsAvgOrderByAggregateInput
    _max?: CandidateForJobsMaxOrderByAggregateInput
    _min?: CandidateForJobsMinOrderByAggregateInput
    _sum?: CandidateForJobsSumOrderByAggregateInput
  }

  export type CandidateForJobsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidateForJobsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidateForJobsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidateForJobsScalarWhereWithAggregatesInput>
    candidateId?: IntWithAggregatesFilter | number
    jobId?: IntWithAggregatesFilter | number
    stage?: StringWithAggregatesFilter | string
    preOnboarding?: StringNullableWithAggregatesFilter | string | null
    dateApplied?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EmployeeCreateInput = {
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    jobs?: JobCreateNestedManyWithoutEmployeeInput
    skills?: EmployeeSkillsCreateNestedManyWithoutEmployeeInput
    interviews?: InterviewRoundCreateNestedManyWithoutInterviewerInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    jobs?: JobUncheckedCreateNestedManyWithoutEmployeeInput
    skills?: EmployeeSkillsUncheckedCreateNestedManyWithoutEmployeeInput
    interviews?: InterviewRoundUncheckedCreateNestedManyWithoutInterviewerInput
  }

  export type EmployeeUpdateInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    jobs?: JobUpdateManyWithoutEmployeeInput
    skills?: EmployeeSkillsUpdateManyWithoutEmployeeInput
    interviews?: InterviewRoundUpdateManyWithoutInterviewerInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    jobs?: JobUncheckedUpdateManyWithoutEmployeeInput
    skills?: EmployeeSkillsUncheckedUpdateManyWithoutEmployeeInput
    interviews?: InterviewRoundUncheckedUpdateManyWithoutInterviewerInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
  }

  export type EmployeeUpdateManyMutationInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateCreateInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsCreateNestedManyWithoutCandidateInput
    skills?: CandidateSkillsCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsUncheckedCreateNestedManyWithoutCandidateInput
    skills?: CandidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUpdateManyWithoutCandidateInput
    skills?: CandidateSkillsUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUncheckedUpdateManyWithoutCandidateInput
    skills?: CandidateSkillsUncheckedUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedUpdateManyWithoutCandidateInput
  }

  export type CandidateCreateManyInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
  }

  export type CandidateUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillsCreateInput = {
    name: string
    candidates?: CandidateSkillsCreateNestedManyWithoutSkillInput
    employee?: EmployeeSkillsCreateNestedManyWithoutSkillInput
  }

  export type SkillsUncheckedCreateInput = {
    id?: number
    name: string
    candidates?: CandidateSkillsUncheckedCreateNestedManyWithoutSkillInput
    employee?: EmployeeSkillsUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateSkillsUpdateManyWithoutSkillInput
    employee?: EmployeeSkillsUpdateManyWithoutSkillInput
  }

  export type SkillsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateSkillsUncheckedUpdateManyWithoutSkillInput
    employee?: EmployeeSkillsUncheckedUpdateManyWithoutSkillInput
  }

  export type SkillsCreateManyInput = {
    id?: number
    name: string
  }

  export type SkillsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobCreateInput = {
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
    employee: EmployeeCreateNestedOneWithoutJobsInput
    appliedBy?: CandidateForJobsCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    assignedTo: number
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
    appliedBy?: CandidateForJobsUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
    employee?: EmployeeUpdateOneRequiredWithoutJobsInput
    appliedBy?: CandidateForJobsUpdateManyWithoutJobInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
    appliedBy?: CandidateForJobsUncheckedUpdateManyWithoutJobInput
  }

  export type JobCreateManyInput = {
    id?: number
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    assignedTo: number
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
  }

  export type JobUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
  }

  export type NewsletterCreateInput = {
    email: string
  }

  export type NewsletterUncheckedCreateInput = {
    id?: number
    email: string
  }

  export type NewsletterUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterCreateManyInput = {
    id?: number
    email: string
  }

  export type NewsletterUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
  }

  export type InterviewRoundCreateInput = {
    id?: number
    title: string
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
    interviewer: EmployeeCreateNestedOneWithoutInterviewsInput
    candidate: CandidateCreateNestedOneWithoutInterviewInput
  }

  export type InterviewRoundUncheckedCreateInput = {
    id?: number
    title: string
    interviewerId: number
    candidateId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
  }

  export type InterviewRoundUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    interviewer?: EmployeeUpdateOneRequiredWithoutInterviewsInput
    candidate?: CandidateUpdateOneRequiredWithoutInterviewInput
  }

  export type InterviewRoundUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    interviewerId?: IntFieldUpdateOperationsInput | number
    candidateId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewRoundCreateManyInput = {
    id?: number
    title: string
    interviewerId: number
    candidateId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
  }

  export type InterviewRoundUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewRoundUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    interviewerId?: IntFieldUpdateOperationsInput | number
    candidateId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateSkillsCreateInput = {
    value: number
    candidate: CandidateCreateNestedOneWithoutSkillsInput
    skill: SkillsCreateNestedOneWithoutCandidatesInput
  }

  export type CandidateSkillsUncheckedCreateInput = {
    candidateId: number
    skillId: number
    value: number
  }

  export type CandidateSkillsUpdateInput = {
    value?: IntFieldUpdateOperationsInput | number
    candidate?: CandidateUpdateOneRequiredWithoutSkillsInput
    skill?: SkillsUpdateOneRequiredWithoutCandidatesInput
  }

  export type CandidateSkillsUncheckedUpdateInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    skillId?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateSkillsCreateManyInput = {
    candidateId: number
    skillId: number
    value: number
  }

  export type CandidateSkillsUpdateManyMutationInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateSkillsUncheckedUpdateManyInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    skillId?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeSkillsCreateInput = {
    value?: number | null
    employee: EmployeeCreateNestedOneWithoutSkillsInput
    skill: SkillsCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeSkillsUncheckedCreateInput = {
    employeeId: number
    skillId: number
    value?: number | null
  }

  export type EmployeeSkillsUpdateInput = {
    value?: NullableIntFieldUpdateOperationsInput | number | null
    employee?: EmployeeUpdateOneRequiredWithoutSkillsInput
    skill?: SkillsUpdateOneRequiredWithoutEmployeeInput
  }

  export type EmployeeSkillsUncheckedUpdateInput = {
    employeeId?: IntFieldUpdateOperationsInput | number
    skillId?: IntFieldUpdateOperationsInput | number
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeeSkillsCreateManyInput = {
    employeeId: number
    skillId: number
    value?: number | null
  }

  export type EmployeeSkillsUpdateManyMutationInput = {
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeeSkillsUncheckedUpdateManyInput = {
    employeeId?: IntFieldUpdateOperationsInput | number
    skillId?: IntFieldUpdateOperationsInput | number
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CandidateSocialCreateInput = {
    name: string
    url: string
    candidate: CandidateCreateNestedOneWithoutSocialsInput
  }

  export type CandidateSocialUncheckedCreateInput = {
    id?: number
    name: string
    candidateId: number
    url: string
  }

  export type CandidateSocialUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    candidate?: CandidateUpdateOneRequiredWithoutSocialsInput
  }

  export type CandidateSocialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    candidateId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateSocialCreateManyInput = {
    id?: number
    name: string
    candidateId: number
    url: string
  }

  export type CandidateSocialUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateSocialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    candidateId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateForJobsCreateInput = {
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
    candidate: CandidateCreateNestedOneWithoutAppliedAtInput
    job: JobCreateNestedOneWithoutAppliedByInput
  }

  export type CandidateForJobsUncheckedCreateInput = {
    candidateId: number
    jobId: number
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
  }

  export type CandidateForJobsUpdateInput = {
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutAppliedAtInput
    job?: JobUpdateOneRequiredWithoutAppliedByInput
  }

  export type CandidateForJobsUncheckedUpdateInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateForJobsCreateManyInput = {
    candidateId: number
    jobId: number
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
  }

  export type CandidateForJobsUpdateManyMutationInput = {
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateForJobsUncheckedUpdateManyInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type EmployeeSkillsListRelationFilter = {
    every?: EmployeeSkillsWhereInput
    some?: EmployeeSkillsWhereInput
    none?: EmployeeSkillsWhereInput
  }

  export type InterviewRoundListRelationFilter = {
    every?: InterviewRoundWhereInput
    some?: InterviewRoundWhereInput
    none?: InterviewRoundWhereInput
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeSkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InterviewRoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelevanceInput = {
    fields: Enumerable<EmployeeOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    empType?: SortOrder
    jobType?: SortOrder
    experience?: SortOrder
    designation?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    experience?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    empType?: SortOrder
    jobType?: SortOrder
    experience?: SortOrder
    designation?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    empType?: SortOrder
    jobType?: SortOrder
    experience?: SortOrder
    designation?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    experience?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type CandidateForJobsListRelationFilter = {
    every?: CandidateForJobsWhereInput
    some?: CandidateForJobsWhereInput
    none?: CandidateForJobsWhereInput
  }

  export type CandidateSkillsListRelationFilter = {
    every?: CandidateSkillsWhereInput
    some?: CandidateSkillsWhereInput
    none?: CandidateSkillsWhereInput
  }

  export type CandidateSocialListRelationFilter = {
    every?: CandidateSocialWhereInput
    some?: CandidateSocialWhereInput
    none?: CandidateSocialWhereInput
  }

  export type CandidateForJobsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateSkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateSocialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateOrderByRelevanceInput = {
    fields: Enumerable<CandidateOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    social?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    resume?: SortOrder
    resumeKey?: SortOrder
    source?: SortOrder
    currJobTitle?: SortOrder
    qualification?: SortOrder
    expectedSalary?: SortOrder
    expectedSalaryUnit?: SortOrder
    currentSalary?: SortOrder
    currentSalaryUnit?: SortOrder
    experience?: SortOrder
    info?: SortOrder
    website?: SortOrder
  }

  export type CandidateAvgOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    expectedSalary?: SortOrder
    currentSalary?: SortOrder
    experience?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    social?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    resume?: SortOrder
    resumeKey?: SortOrder
    source?: SortOrder
    currJobTitle?: SortOrder
    qualification?: SortOrder
    expectedSalary?: SortOrder
    expectedSalaryUnit?: SortOrder
    currentSalary?: SortOrder
    currentSalaryUnit?: SortOrder
    experience?: SortOrder
    info?: SortOrder
    website?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    social?: SortOrder
    profilePicture?: SortOrder
    profilePicKey?: SortOrder
    resume?: SortOrder
    resumeKey?: SortOrder
    source?: SortOrder
    currJobTitle?: SortOrder
    qualification?: SortOrder
    expectedSalary?: SortOrder
    expectedSalaryUnit?: SortOrder
    currentSalary?: SortOrder
    currentSalaryUnit?: SortOrder
    experience?: SortOrder
    info?: SortOrder
    website?: SortOrder
  }

  export type CandidateSumOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    expectedSalary?: SortOrder
    currentSalary?: SortOrder
    experience?: SortOrder
  }

  export type SkillsOrderByRelevanceInput = {
    fields: Enumerable<SkillsOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SkillsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type JobOrderByRelevanceInput = {
    fields: Enumerable<JobOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    description?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
    department?: SortOrder
    jobReq?: SortOrder
    jobRes?: SortOrder
    city?: SortOrder
    keywords?: SortOrder
    type?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    assignedTo?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    description?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
    department?: SortOrder
    city?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    description?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
    department?: SortOrder
    city?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    experienceStartRng?: SortOrder
    experienceEndRng?: SortOrder
    salaryStartRng?: SortOrder
    salaryEndRng?: SortOrder
    assignedTo?: SortOrder
    opening?: SortOrder
    filled?: SortOrder
    active?: SortOrder
    contacting?: SortOrder
    archived?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NewsletterOrderByRelevanceInput = {
    fields: Enumerable<NewsletterOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type NewsletterCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsletterMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CandidateRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type InterviewRoundOrderByRelevanceInput = {
    fields: Enumerable<InterviewRoundOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type InterviewRoundCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    url?: SortOrder
    feedback?: SortOrder
  }

  export type InterviewRoundAvgOrderByAggregateInput = {
    id?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
  }

  export type InterviewRoundMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    url?: SortOrder
    feedback?: SortOrder
  }

  export type InterviewRoundMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    url?: SortOrder
    feedback?: SortOrder
  }

  export type InterviewRoundSumOrderByAggregateInput = {
    id?: SortOrder
    interviewerId?: SortOrder
    candidateId?: SortOrder
  }

  export type SkillsRelationFilter = {
    is?: SkillsWhereInput
    isNot?: SkillsWhereInput
  }

  export type CandidateSkillsCandidateIdSkillIdCompoundUniqueInput = {
    candidateId: number
    skillId: number
  }

  export type CandidateSkillsCountOrderByAggregateInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type CandidateSkillsAvgOrderByAggregateInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type CandidateSkillsMaxOrderByAggregateInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type CandidateSkillsMinOrderByAggregateInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type CandidateSkillsSumOrderByAggregateInput = {
    candidateId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type EmployeeSkillsEmployeeIdSkillIdCompoundUniqueInput = {
    employeeId: number
    skillId: number
  }

  export type EmployeeSkillsCountOrderByAggregateInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type EmployeeSkillsAvgOrderByAggregateInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type EmployeeSkillsMaxOrderByAggregateInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type EmployeeSkillsMinOrderByAggregateInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type EmployeeSkillsSumOrderByAggregateInput = {
    employeeId?: SortOrder
    skillId?: SortOrder
    value?: SortOrder
  }

  export type CandidateSocialOrderByRelevanceInput = {
    fields: Enumerable<CandidateSocialOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type CandidateSocialCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    candidateId?: SortOrder
    url?: SortOrder
  }

  export type CandidateSocialAvgOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
  }

  export type CandidateSocialMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    candidateId?: SortOrder
    url?: SortOrder
  }

  export type CandidateSocialMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    candidateId?: SortOrder
    url?: SortOrder
  }

  export type CandidateSocialSumOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
  }

  export type JobRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type CandidateForJobsOrderByRelevanceInput = {
    fields: Enumerable<CandidateForJobsOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type CandidateForJobsCandidateIdJobIdCompoundUniqueInput = {
    candidateId: number
    jobId: number
  }

  export type CandidateForJobsCountOrderByAggregateInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
    stage?: SortOrder
    preOnboarding?: SortOrder
    dateApplied?: SortOrder
  }

  export type CandidateForJobsAvgOrderByAggregateInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
  }

  export type CandidateForJobsMaxOrderByAggregateInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
    stage?: SortOrder
    preOnboarding?: SortOrder
    dateApplied?: SortOrder
  }

  export type CandidateForJobsMinOrderByAggregateInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
    stage?: SortOrder
    preOnboarding?: SortOrder
    dateApplied?: SortOrder
  }

  export type CandidateForJobsSumOrderByAggregateInput = {
    candidateId?: SortOrder
    jobId?: SortOrder
  }

  export type JobCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<JobCreateWithoutEmployeeInput>, Enumerable<JobUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutEmployeeInput>
    createMany?: JobCreateManyEmployeeInputEnvelope
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type EmployeeSkillsCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutEmployeeInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutEmployeeInput>
    createMany?: EmployeeSkillsCreateManyEmployeeInputEnvelope
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
  }

  export type InterviewRoundCreateNestedManyWithoutInterviewerInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutInterviewerInput>, Enumerable<InterviewRoundUncheckedCreateWithoutInterviewerInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutInterviewerInput>
    createMany?: InterviewRoundCreateManyInterviewerInputEnvelope
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
  }

  export type JobUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<JobCreateWithoutEmployeeInput>, Enumerable<JobUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutEmployeeInput>
    createMany?: JobCreateManyEmployeeInputEnvelope
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type EmployeeSkillsUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutEmployeeInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutEmployeeInput>
    createMany?: EmployeeSkillsCreateManyEmployeeInputEnvelope
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
  }

  export type InterviewRoundUncheckedCreateNestedManyWithoutInterviewerInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutInterviewerInput>, Enumerable<InterviewRoundUncheckedCreateWithoutInterviewerInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutInterviewerInput>
    createMany?: InterviewRoundCreateManyInterviewerInputEnvelope
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<JobCreateWithoutEmployeeInput>, Enumerable<JobUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutEmployeeInput>
    createMany?: JobCreateManyEmployeeInputEnvelope
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    connect?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type EmployeeSkillsUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutEmployeeInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<EmployeeSkillsUpsertWithWhereUniqueWithoutEmployeeInput>
    createMany?: EmployeeSkillsCreateManyEmployeeInputEnvelope
    set?: Enumerable<EmployeeSkillsWhereUniqueInput>
    disconnect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    delete?: Enumerable<EmployeeSkillsWhereUniqueInput>
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    update?: Enumerable<EmployeeSkillsUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<EmployeeSkillsUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<EmployeeSkillsScalarWhereInput>
  }

  export type InterviewRoundUpdateManyWithoutInterviewerInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutInterviewerInput>, Enumerable<InterviewRoundUncheckedCreateWithoutInterviewerInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutInterviewerInput>
    upsert?: Enumerable<InterviewRoundUpsertWithWhereUniqueWithoutInterviewerInput>
    createMany?: InterviewRoundCreateManyInterviewerInputEnvelope
    set?: Enumerable<InterviewRoundWhereUniqueInput>
    disconnect?: Enumerable<InterviewRoundWhereUniqueInput>
    delete?: Enumerable<InterviewRoundWhereUniqueInput>
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
    update?: Enumerable<InterviewRoundUpdateWithWhereUniqueWithoutInterviewerInput>
    updateMany?: Enumerable<InterviewRoundUpdateManyWithWhereWithoutInterviewerInput>
    deleteMany?: Enumerable<InterviewRoundScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUncheckedUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<JobCreateWithoutEmployeeInput>, Enumerable<JobUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutEmployeeInput>
    createMany?: JobCreateManyEmployeeInputEnvelope
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    connect?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type EmployeeSkillsUncheckedUpdateManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutEmployeeInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<EmployeeSkillsUpsertWithWhereUniqueWithoutEmployeeInput>
    createMany?: EmployeeSkillsCreateManyEmployeeInputEnvelope
    set?: Enumerable<EmployeeSkillsWhereUniqueInput>
    disconnect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    delete?: Enumerable<EmployeeSkillsWhereUniqueInput>
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    update?: Enumerable<EmployeeSkillsUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<EmployeeSkillsUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<EmployeeSkillsScalarWhereInput>
  }

  export type InterviewRoundUncheckedUpdateManyWithoutInterviewerInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutInterviewerInput>, Enumerable<InterviewRoundUncheckedCreateWithoutInterviewerInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutInterviewerInput>
    upsert?: Enumerable<InterviewRoundUpsertWithWhereUniqueWithoutInterviewerInput>
    createMany?: InterviewRoundCreateManyInterviewerInputEnvelope
    set?: Enumerable<InterviewRoundWhereUniqueInput>
    disconnect?: Enumerable<InterviewRoundWhereUniqueInput>
    delete?: Enumerable<InterviewRoundWhereUniqueInput>
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
    update?: Enumerable<InterviewRoundUpdateWithWhereUniqueWithoutInterviewerInput>
    updateMany?: Enumerable<InterviewRoundUpdateManyWithWhereWithoutInterviewerInput>
    deleteMany?: Enumerable<InterviewRoundScalarWhereInput>
  }

  export type CandidateForJobsCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutCandidateInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutCandidateInput>
    createMany?: CandidateForJobsCreateManyCandidateInputEnvelope
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
  }

  export type CandidateSkillsCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutCandidateInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutCandidateInput>
    createMany?: CandidateSkillsCreateManyCandidateInputEnvelope
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
  }

  export type CandidateSocialCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSocialCreateWithoutCandidateInput>, Enumerable<CandidateSocialUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSocialCreateOrConnectWithoutCandidateInput>
    createMany?: CandidateSocialCreateManyCandidateInputEnvelope
    connect?: Enumerable<CandidateSocialWhereUniqueInput>
  }

  export type InterviewRoundCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutCandidateInput>, Enumerable<InterviewRoundUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutCandidateInput>
    createMany?: InterviewRoundCreateManyCandidateInputEnvelope
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
  }

  export type CandidateForJobsUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutCandidateInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutCandidateInput>
    createMany?: CandidateForJobsCreateManyCandidateInputEnvelope
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
  }

  export type CandidateSkillsUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutCandidateInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutCandidateInput>
    createMany?: CandidateSkillsCreateManyCandidateInputEnvelope
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
  }

  export type CandidateSocialUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSocialCreateWithoutCandidateInput>, Enumerable<CandidateSocialUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSocialCreateOrConnectWithoutCandidateInput>
    createMany?: CandidateSocialCreateManyCandidateInputEnvelope
    connect?: Enumerable<CandidateSocialWhereUniqueInput>
  }

  export type InterviewRoundUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutCandidateInput>, Enumerable<InterviewRoundUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutCandidateInput>
    createMany?: InterviewRoundCreateManyCandidateInputEnvelope
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
  }

  export type CandidateForJobsUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutCandidateInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<CandidateForJobsUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: CandidateForJobsCreateManyCandidateInputEnvelope
    set?: Enumerable<CandidateForJobsWhereUniqueInput>
    disconnect?: Enumerable<CandidateForJobsWhereUniqueInput>
    delete?: Enumerable<CandidateForJobsWhereUniqueInput>
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
    update?: Enumerable<CandidateForJobsUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<CandidateForJobsUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<CandidateForJobsScalarWhereInput>
  }

  export type CandidateSkillsUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutCandidateInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<CandidateSkillsUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: CandidateSkillsCreateManyCandidateInputEnvelope
    set?: Enumerable<CandidateSkillsWhereUniqueInput>
    disconnect?: Enumerable<CandidateSkillsWhereUniqueInput>
    delete?: Enumerable<CandidateSkillsWhereUniqueInput>
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
    update?: Enumerable<CandidateSkillsUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<CandidateSkillsUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<CandidateSkillsScalarWhereInput>
  }

  export type CandidateSocialUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSocialCreateWithoutCandidateInput>, Enumerable<CandidateSocialUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSocialCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<CandidateSocialUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: CandidateSocialCreateManyCandidateInputEnvelope
    set?: Enumerable<CandidateSocialWhereUniqueInput>
    disconnect?: Enumerable<CandidateSocialWhereUniqueInput>
    delete?: Enumerable<CandidateSocialWhereUniqueInput>
    connect?: Enumerable<CandidateSocialWhereUniqueInput>
    update?: Enumerable<CandidateSocialUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<CandidateSocialUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<CandidateSocialScalarWhereInput>
  }

  export type InterviewRoundUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutCandidateInput>, Enumerable<InterviewRoundUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<InterviewRoundUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: InterviewRoundCreateManyCandidateInputEnvelope
    set?: Enumerable<InterviewRoundWhereUniqueInput>
    disconnect?: Enumerable<InterviewRoundWhereUniqueInput>
    delete?: Enumerable<InterviewRoundWhereUniqueInput>
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
    update?: Enumerable<InterviewRoundUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<InterviewRoundUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<InterviewRoundScalarWhereInput>
  }

  export type CandidateForJobsUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutCandidateInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<CandidateForJobsUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: CandidateForJobsCreateManyCandidateInputEnvelope
    set?: Enumerable<CandidateForJobsWhereUniqueInput>
    disconnect?: Enumerable<CandidateForJobsWhereUniqueInput>
    delete?: Enumerable<CandidateForJobsWhereUniqueInput>
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
    update?: Enumerable<CandidateForJobsUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<CandidateForJobsUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<CandidateForJobsScalarWhereInput>
  }

  export type CandidateSkillsUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutCandidateInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<CandidateSkillsUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: CandidateSkillsCreateManyCandidateInputEnvelope
    set?: Enumerable<CandidateSkillsWhereUniqueInput>
    disconnect?: Enumerable<CandidateSkillsWhereUniqueInput>
    delete?: Enumerable<CandidateSkillsWhereUniqueInput>
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
    update?: Enumerable<CandidateSkillsUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<CandidateSkillsUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<CandidateSkillsScalarWhereInput>
  }

  export type CandidateSocialUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<CandidateSocialCreateWithoutCandidateInput>, Enumerable<CandidateSocialUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<CandidateSocialCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<CandidateSocialUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: CandidateSocialCreateManyCandidateInputEnvelope
    set?: Enumerable<CandidateSocialWhereUniqueInput>
    disconnect?: Enumerable<CandidateSocialWhereUniqueInput>
    delete?: Enumerable<CandidateSocialWhereUniqueInput>
    connect?: Enumerable<CandidateSocialWhereUniqueInput>
    update?: Enumerable<CandidateSocialUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<CandidateSocialUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<CandidateSocialScalarWhereInput>
  }

  export type InterviewRoundUncheckedUpdateManyWithoutCandidateInput = {
    create?: XOR<Enumerable<InterviewRoundCreateWithoutCandidateInput>, Enumerable<InterviewRoundUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<InterviewRoundCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<InterviewRoundUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: InterviewRoundCreateManyCandidateInputEnvelope
    set?: Enumerable<InterviewRoundWhereUniqueInput>
    disconnect?: Enumerable<InterviewRoundWhereUniqueInput>
    delete?: Enumerable<InterviewRoundWhereUniqueInput>
    connect?: Enumerable<InterviewRoundWhereUniqueInput>
    update?: Enumerable<InterviewRoundUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<InterviewRoundUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<InterviewRoundScalarWhereInput>
  }

  export type CandidateSkillsCreateNestedManyWithoutSkillInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutSkillInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutSkillInput>
    createMany?: CandidateSkillsCreateManySkillInputEnvelope
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
  }

  export type EmployeeSkillsCreateNestedManyWithoutSkillInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutSkillInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutSkillInput>
    createMany?: EmployeeSkillsCreateManySkillInputEnvelope
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
  }

  export type CandidateSkillsUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutSkillInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutSkillInput>
    createMany?: CandidateSkillsCreateManySkillInputEnvelope
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
  }

  export type EmployeeSkillsUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutSkillInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutSkillInput>
    createMany?: EmployeeSkillsCreateManySkillInputEnvelope
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
  }

  export type CandidateSkillsUpdateManyWithoutSkillInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutSkillInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutSkillInput>
    upsert?: Enumerable<CandidateSkillsUpsertWithWhereUniqueWithoutSkillInput>
    createMany?: CandidateSkillsCreateManySkillInputEnvelope
    set?: Enumerable<CandidateSkillsWhereUniqueInput>
    disconnect?: Enumerable<CandidateSkillsWhereUniqueInput>
    delete?: Enumerable<CandidateSkillsWhereUniqueInput>
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
    update?: Enumerable<CandidateSkillsUpdateWithWhereUniqueWithoutSkillInput>
    updateMany?: Enumerable<CandidateSkillsUpdateManyWithWhereWithoutSkillInput>
    deleteMany?: Enumerable<CandidateSkillsScalarWhereInput>
  }

  export type EmployeeSkillsUpdateManyWithoutSkillInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutSkillInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutSkillInput>
    upsert?: Enumerable<EmployeeSkillsUpsertWithWhereUniqueWithoutSkillInput>
    createMany?: EmployeeSkillsCreateManySkillInputEnvelope
    set?: Enumerable<EmployeeSkillsWhereUniqueInput>
    disconnect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    delete?: Enumerable<EmployeeSkillsWhereUniqueInput>
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    update?: Enumerable<EmployeeSkillsUpdateWithWhereUniqueWithoutSkillInput>
    updateMany?: Enumerable<EmployeeSkillsUpdateManyWithWhereWithoutSkillInput>
    deleteMany?: Enumerable<EmployeeSkillsScalarWhereInput>
  }

  export type CandidateSkillsUncheckedUpdateManyWithoutSkillInput = {
    create?: XOR<Enumerable<CandidateSkillsCreateWithoutSkillInput>, Enumerable<CandidateSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<CandidateSkillsCreateOrConnectWithoutSkillInput>
    upsert?: Enumerable<CandidateSkillsUpsertWithWhereUniqueWithoutSkillInput>
    createMany?: CandidateSkillsCreateManySkillInputEnvelope
    set?: Enumerable<CandidateSkillsWhereUniqueInput>
    disconnect?: Enumerable<CandidateSkillsWhereUniqueInput>
    delete?: Enumerable<CandidateSkillsWhereUniqueInput>
    connect?: Enumerable<CandidateSkillsWhereUniqueInput>
    update?: Enumerable<CandidateSkillsUpdateWithWhereUniqueWithoutSkillInput>
    updateMany?: Enumerable<CandidateSkillsUpdateManyWithWhereWithoutSkillInput>
    deleteMany?: Enumerable<CandidateSkillsScalarWhereInput>
  }

  export type EmployeeSkillsUncheckedUpdateManyWithoutSkillInput = {
    create?: XOR<Enumerable<EmployeeSkillsCreateWithoutSkillInput>, Enumerable<EmployeeSkillsUncheckedCreateWithoutSkillInput>>
    connectOrCreate?: Enumerable<EmployeeSkillsCreateOrConnectWithoutSkillInput>
    upsert?: Enumerable<EmployeeSkillsUpsertWithWhereUniqueWithoutSkillInput>
    createMany?: EmployeeSkillsCreateManySkillInputEnvelope
    set?: Enumerable<EmployeeSkillsWhereUniqueInput>
    disconnect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    delete?: Enumerable<EmployeeSkillsWhereUniqueInput>
    connect?: Enumerable<EmployeeSkillsWhereUniqueInput>
    update?: Enumerable<EmployeeSkillsUpdateWithWhereUniqueWithoutSkillInput>
    updateMany?: Enumerable<EmployeeSkillsUpdateManyWithWhereWithoutSkillInput>
    deleteMany?: Enumerable<EmployeeSkillsScalarWhereInput>
  }

  export type JobCreatejobReqInput = {
    set: Enumerable<string>
  }

  export type JobCreatejobResInput = {
    set: Enumerable<string>
  }

  export type JobCreatekeywordsInput = {
    set: Enumerable<string>
  }

  export type JobCreatetypeInput = {
    set: Enumerable<string>
  }

  export type EmployeeCreateNestedOneWithoutJobsInput = {
    create?: XOR<EmployeeCreateWithoutJobsInput, EmployeeUncheckedCreateWithoutJobsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutJobsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type CandidateForJobsCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutJobInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutJobInput>
    createMany?: CandidateForJobsCreateManyJobInputEnvelope
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
  }

  export type CandidateForJobsUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutJobInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutJobInput>
    createMany?: CandidateForJobsCreateManyJobInputEnvelope
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type JobUpdatejobReqInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type JobUpdatejobResInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type JobUpdatekeywordsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type JobUpdatetypeInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type EmployeeUpdateOneRequiredWithoutJobsInput = {
    create?: XOR<EmployeeCreateWithoutJobsInput, EmployeeUncheckedCreateWithoutJobsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutJobsInput
    upsert?: EmployeeUpsertWithoutJobsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUpdateWithoutJobsInput, EmployeeUncheckedUpdateWithoutJobsInput>
  }

  export type CandidateForJobsUpdateManyWithoutJobInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutJobInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<CandidateForJobsUpsertWithWhereUniqueWithoutJobInput>
    createMany?: CandidateForJobsCreateManyJobInputEnvelope
    set?: Enumerable<CandidateForJobsWhereUniqueInput>
    disconnect?: Enumerable<CandidateForJobsWhereUniqueInput>
    delete?: Enumerable<CandidateForJobsWhereUniqueInput>
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
    update?: Enumerable<CandidateForJobsUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<CandidateForJobsUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<CandidateForJobsScalarWhereInput>
  }

  export type CandidateForJobsUncheckedUpdateManyWithoutJobInput = {
    create?: XOR<Enumerable<CandidateForJobsCreateWithoutJobInput>, Enumerable<CandidateForJobsUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<CandidateForJobsCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<CandidateForJobsUpsertWithWhereUniqueWithoutJobInput>
    createMany?: CandidateForJobsCreateManyJobInputEnvelope
    set?: Enumerable<CandidateForJobsWhereUniqueInput>
    disconnect?: Enumerable<CandidateForJobsWhereUniqueInput>
    delete?: Enumerable<CandidateForJobsWhereUniqueInput>
    connect?: Enumerable<CandidateForJobsWhereUniqueInput>
    update?: Enumerable<CandidateForJobsUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<CandidateForJobsUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<CandidateForJobsScalarWhereInput>
  }

  export type EmployeeCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<EmployeeCreateWithoutInterviewsInput, EmployeeUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInterviewsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutInterviewInput = {
    create?: XOR<CandidateCreateWithoutInterviewInput, CandidateUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutInterviewInput
    connect?: CandidateWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutInterviewsInput = {
    create?: XOR<EmployeeCreateWithoutInterviewsInput, EmployeeUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInterviewsInput
    upsert?: EmployeeUpsertWithoutInterviewsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUpdateWithoutInterviewsInput, EmployeeUncheckedUpdateWithoutInterviewsInput>
  }

  export type CandidateUpdateOneRequiredWithoutInterviewInput = {
    create?: XOR<CandidateCreateWithoutInterviewInput, CandidateUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutInterviewInput
    upsert?: CandidateUpsertWithoutInterviewInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutInterviewInput, CandidateUncheckedUpdateWithoutInterviewInput>
  }

  export type CandidateCreateNestedOneWithoutSkillsInput = {
    create?: XOR<CandidateCreateWithoutSkillsInput, CandidateUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutSkillsInput
    connect?: CandidateWhereUniqueInput
  }

  export type SkillsCreateNestedOneWithoutCandidatesInput = {
    create?: XOR<SkillsCreateWithoutCandidatesInput, SkillsUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutCandidatesInput
    connect?: SkillsWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutSkillsInput = {
    create?: XOR<CandidateCreateWithoutSkillsInput, CandidateUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutSkillsInput
    upsert?: CandidateUpsertWithoutSkillsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutSkillsInput, CandidateUncheckedUpdateWithoutSkillsInput>
  }

  export type SkillsUpdateOneRequiredWithoutCandidatesInput = {
    create?: XOR<SkillsCreateWithoutCandidatesInput, SkillsUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutCandidatesInput
    upsert?: SkillsUpsertWithoutCandidatesInput
    connect?: SkillsWhereUniqueInput
    update?: XOR<SkillsUpdateWithoutCandidatesInput, SkillsUncheckedUpdateWithoutCandidatesInput>
  }

  export type EmployeeCreateNestedOneWithoutSkillsInput = {
    create?: XOR<EmployeeCreateWithoutSkillsInput, EmployeeUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSkillsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type SkillsCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<SkillsCreateWithoutEmployeeInput, SkillsUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutEmployeeInput
    connect?: SkillsWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutSkillsInput = {
    create?: XOR<EmployeeCreateWithoutSkillsInput, EmployeeUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSkillsInput
    upsert?: EmployeeUpsertWithoutSkillsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUpdateWithoutSkillsInput, EmployeeUncheckedUpdateWithoutSkillsInput>
  }

  export type SkillsUpdateOneRequiredWithoutEmployeeInput = {
    create?: XOR<SkillsCreateWithoutEmployeeInput, SkillsUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutEmployeeInput
    upsert?: SkillsUpsertWithoutEmployeeInput
    connect?: SkillsWhereUniqueInput
    update?: XOR<SkillsUpdateWithoutEmployeeInput, SkillsUncheckedUpdateWithoutEmployeeInput>
  }

  export type CandidateCreateNestedOneWithoutSocialsInput = {
    create?: XOR<CandidateCreateWithoutSocialsInput, CandidateUncheckedCreateWithoutSocialsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutSocialsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutSocialsInput = {
    create?: XOR<CandidateCreateWithoutSocialsInput, CandidateUncheckedCreateWithoutSocialsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutSocialsInput
    upsert?: CandidateUpsertWithoutSocialsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutSocialsInput, CandidateUncheckedUpdateWithoutSocialsInput>
  }

  export type CandidateCreateNestedOneWithoutAppliedAtInput = {
    create?: XOR<CandidateCreateWithoutAppliedAtInput, CandidateUncheckedCreateWithoutAppliedAtInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutAppliedAtInput
    connect?: CandidateWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutAppliedByInput = {
    create?: XOR<JobCreateWithoutAppliedByInput, JobUncheckedCreateWithoutAppliedByInput>
    connectOrCreate?: JobCreateOrConnectWithoutAppliedByInput
    connect?: JobWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutAppliedAtInput = {
    create?: XOR<CandidateCreateWithoutAppliedAtInput, CandidateUncheckedCreateWithoutAppliedAtInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutAppliedAtInput
    upsert?: CandidateUpsertWithoutAppliedAtInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<CandidateUpdateWithoutAppliedAtInput, CandidateUncheckedUpdateWithoutAppliedAtInput>
  }

  export type JobUpdateOneRequiredWithoutAppliedByInput = {
    create?: XOR<JobCreateWithoutAppliedByInput, JobUncheckedCreateWithoutAppliedByInput>
    connectOrCreate?: JobCreateOrConnectWithoutAppliedByInput
    upsert?: JobUpsertWithoutAppliedByInput
    connect?: JobWhereUniqueInput
    update?: XOR<JobUpdateWithoutAppliedByInput, JobUncheckedUpdateWithoutAppliedByInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type NestedBigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type JobCreateWithoutEmployeeInput = {
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
    appliedBy?: CandidateForJobsCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutEmployeeInput = {
    id?: number
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
    appliedBy?: CandidateForJobsUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutEmployeeInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutEmployeeInput, JobUncheckedCreateWithoutEmployeeInput>
  }

  export type JobCreateManyEmployeeInputEnvelope = {
    data: Enumerable<JobCreateManyEmployeeInput>
    skipDuplicates?: boolean
  }

  export type EmployeeSkillsCreateWithoutEmployeeInput = {
    value?: number | null
    skill: SkillsCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeSkillsUncheckedCreateWithoutEmployeeInput = {
    skillId: number
    value?: number | null
  }

  export type EmployeeSkillsCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeSkillsWhereUniqueInput
    create: XOR<EmployeeSkillsCreateWithoutEmployeeInput, EmployeeSkillsUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeSkillsCreateManyEmployeeInputEnvelope = {
    data: Enumerable<EmployeeSkillsCreateManyEmployeeInput>
    skipDuplicates?: boolean
  }

  export type InterviewRoundCreateWithoutInterviewerInput = {
    id?: number
    title: string
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
    candidate: CandidateCreateNestedOneWithoutInterviewInput
  }

  export type InterviewRoundUncheckedCreateWithoutInterviewerInput = {
    id?: number
    title: string
    candidateId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
  }

  export type InterviewRoundCreateOrConnectWithoutInterviewerInput = {
    where: InterviewRoundWhereUniqueInput
    create: XOR<InterviewRoundCreateWithoutInterviewerInput, InterviewRoundUncheckedCreateWithoutInterviewerInput>
  }

  export type InterviewRoundCreateManyInterviewerInputEnvelope = {
    data: Enumerable<InterviewRoundCreateManyInterviewerInput>
    skipDuplicates?: boolean
  }

  export type JobUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutEmployeeInput, JobUncheckedUpdateWithoutEmployeeInput>
    create: XOR<JobCreateWithoutEmployeeInput, JobUncheckedCreateWithoutEmployeeInput>
  }

  export type JobUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutEmployeeInput, JobUncheckedUpdateWithoutEmployeeInput>
  }

  export type JobUpdateManyWithWhereWithoutEmployeeInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutJobsInput>
  }

  export type JobScalarWhereInput = {
    AND?: Enumerable<JobScalarWhereInput>
    OR?: Enumerable<JobScalarWhereInput>
    NOT?: Enumerable<JobScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    experienceStartRng?: IntFilter | number
    experienceEndRng?: IntFilter | number
    salaryStartRng?: IntFilter | number
    salaryEndRng?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    closedAt?: DateTimeNullableFilter | Date | string | null
    assignedTo?: IntFilter | number
    status?: StringFilter | string
    description?: StringFilter | string
    opening?: IntFilter | number
    filled?: IntFilter | number
    active?: IntFilter | number
    contacting?: IntFilter | number
    archived?: IntFilter | number
    department?: StringFilter | string
    jobReq?: StringNullableListFilter
    jobRes?: StringNullableListFilter
    city?: StringFilter | string
    keywords?: StringNullableListFilter
    type?: StringNullableListFilter
  }

  export type EmployeeSkillsUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeSkillsWhereUniqueInput
    update: XOR<EmployeeSkillsUpdateWithoutEmployeeInput, EmployeeSkillsUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeSkillsCreateWithoutEmployeeInput, EmployeeSkillsUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeSkillsUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeSkillsWhereUniqueInput
    data: XOR<EmployeeSkillsUpdateWithoutEmployeeInput, EmployeeSkillsUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeSkillsUpdateManyWithWhereWithoutEmployeeInput = {
    where: EmployeeSkillsScalarWhereInput
    data: XOR<EmployeeSkillsUpdateManyMutationInput, EmployeeSkillsUncheckedUpdateManyWithoutSkillsInput>
  }

  export type EmployeeSkillsScalarWhereInput = {
    AND?: Enumerable<EmployeeSkillsScalarWhereInput>
    OR?: Enumerable<EmployeeSkillsScalarWhereInput>
    NOT?: Enumerable<EmployeeSkillsScalarWhereInput>
    employeeId?: IntFilter | number
    skillId?: IntFilter | number
    value?: IntNullableFilter | number | null
  }

  export type InterviewRoundUpsertWithWhereUniqueWithoutInterviewerInput = {
    where: InterviewRoundWhereUniqueInput
    update: XOR<InterviewRoundUpdateWithoutInterviewerInput, InterviewRoundUncheckedUpdateWithoutInterviewerInput>
    create: XOR<InterviewRoundCreateWithoutInterviewerInput, InterviewRoundUncheckedCreateWithoutInterviewerInput>
  }

  export type InterviewRoundUpdateWithWhereUniqueWithoutInterviewerInput = {
    where: InterviewRoundWhereUniqueInput
    data: XOR<InterviewRoundUpdateWithoutInterviewerInput, InterviewRoundUncheckedUpdateWithoutInterviewerInput>
  }

  export type InterviewRoundUpdateManyWithWhereWithoutInterviewerInput = {
    where: InterviewRoundScalarWhereInput
    data: XOR<InterviewRoundUpdateManyMutationInput, InterviewRoundUncheckedUpdateManyWithoutInterviewsInput>
  }

  export type InterviewRoundScalarWhereInput = {
    AND?: Enumerable<InterviewRoundScalarWhereInput>
    OR?: Enumerable<InterviewRoundScalarWhereInput>
    NOT?: Enumerable<InterviewRoundScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    interviewerId?: IntFilter | number
    candidateId?: IntFilter | number
    date?: DateTimeFilter | Date | string
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    url?: StringFilter | string
    feedback?: StringNullableFilter | string | null
  }

  export type CandidateForJobsCreateWithoutCandidateInput = {
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
    job: JobCreateNestedOneWithoutAppliedByInput
  }

  export type CandidateForJobsUncheckedCreateWithoutCandidateInput = {
    jobId: number
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
  }

  export type CandidateForJobsCreateOrConnectWithoutCandidateInput = {
    where: CandidateForJobsWhereUniqueInput
    create: XOR<CandidateForJobsCreateWithoutCandidateInput, CandidateForJobsUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateForJobsCreateManyCandidateInputEnvelope = {
    data: Enumerable<CandidateForJobsCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type CandidateSkillsCreateWithoutCandidateInput = {
    value: number
    skill: SkillsCreateNestedOneWithoutCandidatesInput
  }

  export type CandidateSkillsUncheckedCreateWithoutCandidateInput = {
    skillId: number
    value: number
  }

  export type CandidateSkillsCreateOrConnectWithoutCandidateInput = {
    where: CandidateSkillsWhereUniqueInput
    create: XOR<CandidateSkillsCreateWithoutCandidateInput, CandidateSkillsUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateSkillsCreateManyCandidateInputEnvelope = {
    data: Enumerable<CandidateSkillsCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type CandidateSocialCreateWithoutCandidateInput = {
    name: string
    url: string
  }

  export type CandidateSocialUncheckedCreateWithoutCandidateInput = {
    id?: number
    name: string
    url: string
  }

  export type CandidateSocialCreateOrConnectWithoutCandidateInput = {
    where: CandidateSocialWhereUniqueInput
    create: XOR<CandidateSocialCreateWithoutCandidateInput, CandidateSocialUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateSocialCreateManyCandidateInputEnvelope = {
    data: Enumerable<CandidateSocialCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type InterviewRoundCreateWithoutCandidateInput = {
    id?: number
    title: string
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
    interviewer: EmployeeCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewRoundUncheckedCreateWithoutCandidateInput = {
    id?: number
    title: string
    interviewerId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
  }

  export type InterviewRoundCreateOrConnectWithoutCandidateInput = {
    where: InterviewRoundWhereUniqueInput
    create: XOR<InterviewRoundCreateWithoutCandidateInput, InterviewRoundUncheckedCreateWithoutCandidateInput>
  }

  export type InterviewRoundCreateManyCandidateInputEnvelope = {
    data: Enumerable<InterviewRoundCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type CandidateForJobsUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateForJobsWhereUniqueInput
    update: XOR<CandidateForJobsUpdateWithoutCandidateInput, CandidateForJobsUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateForJobsCreateWithoutCandidateInput, CandidateForJobsUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateForJobsUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateForJobsWhereUniqueInput
    data: XOR<CandidateForJobsUpdateWithoutCandidateInput, CandidateForJobsUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateForJobsUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateForJobsScalarWhereInput
    data: XOR<CandidateForJobsUpdateManyMutationInput, CandidateForJobsUncheckedUpdateManyWithoutAppliedAtInput>
  }

  export type CandidateForJobsScalarWhereInput = {
    AND?: Enumerable<CandidateForJobsScalarWhereInput>
    OR?: Enumerable<CandidateForJobsScalarWhereInput>
    NOT?: Enumerable<CandidateForJobsScalarWhereInput>
    candidateId?: IntFilter | number
    jobId?: IntFilter | number
    stage?: StringFilter | string
    preOnboarding?: StringNullableFilter | string | null
    dateApplied?: DateTimeFilter | Date | string
  }

  export type CandidateSkillsUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateSkillsWhereUniqueInput
    update: XOR<CandidateSkillsUpdateWithoutCandidateInput, CandidateSkillsUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateSkillsCreateWithoutCandidateInput, CandidateSkillsUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateSkillsUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateSkillsWhereUniqueInput
    data: XOR<CandidateSkillsUpdateWithoutCandidateInput, CandidateSkillsUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateSkillsUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateSkillsScalarWhereInput
    data: XOR<CandidateSkillsUpdateManyMutationInput, CandidateSkillsUncheckedUpdateManyWithoutSkillsInput>
  }

  export type CandidateSkillsScalarWhereInput = {
    AND?: Enumerable<CandidateSkillsScalarWhereInput>
    OR?: Enumerable<CandidateSkillsScalarWhereInput>
    NOT?: Enumerable<CandidateSkillsScalarWhereInput>
    candidateId?: IntFilter | number
    skillId?: IntFilter | number
    value?: IntFilter | number
  }

  export type CandidateSocialUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateSocialWhereUniqueInput
    update: XOR<CandidateSocialUpdateWithoutCandidateInput, CandidateSocialUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateSocialCreateWithoutCandidateInput, CandidateSocialUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateSocialUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateSocialWhereUniqueInput
    data: XOR<CandidateSocialUpdateWithoutCandidateInput, CandidateSocialUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateSocialUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateSocialScalarWhereInput
    data: XOR<CandidateSocialUpdateManyMutationInput, CandidateSocialUncheckedUpdateManyWithoutSocialsInput>
  }

  export type CandidateSocialScalarWhereInput = {
    AND?: Enumerable<CandidateSocialScalarWhereInput>
    OR?: Enumerable<CandidateSocialScalarWhereInput>
    NOT?: Enumerable<CandidateSocialScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    candidateId?: IntFilter | number
    url?: StringFilter | string
  }

  export type InterviewRoundUpsertWithWhereUniqueWithoutCandidateInput = {
    where: InterviewRoundWhereUniqueInput
    update: XOR<InterviewRoundUpdateWithoutCandidateInput, InterviewRoundUncheckedUpdateWithoutCandidateInput>
    create: XOR<InterviewRoundCreateWithoutCandidateInput, InterviewRoundUncheckedCreateWithoutCandidateInput>
  }

  export type InterviewRoundUpdateWithWhereUniqueWithoutCandidateInput = {
    where: InterviewRoundWhereUniqueInput
    data: XOR<InterviewRoundUpdateWithoutCandidateInput, InterviewRoundUncheckedUpdateWithoutCandidateInput>
  }

  export type InterviewRoundUpdateManyWithWhereWithoutCandidateInput = {
    where: InterviewRoundScalarWhereInput
    data: XOR<InterviewRoundUpdateManyMutationInput, InterviewRoundUncheckedUpdateManyWithoutInterviewInput>
  }

  export type CandidateSkillsCreateWithoutSkillInput = {
    value: number
    candidate: CandidateCreateNestedOneWithoutSkillsInput
  }

  export type CandidateSkillsUncheckedCreateWithoutSkillInput = {
    candidateId: number
    value: number
  }

  export type CandidateSkillsCreateOrConnectWithoutSkillInput = {
    where: CandidateSkillsWhereUniqueInput
    create: XOR<CandidateSkillsCreateWithoutSkillInput, CandidateSkillsUncheckedCreateWithoutSkillInput>
  }

  export type CandidateSkillsCreateManySkillInputEnvelope = {
    data: Enumerable<CandidateSkillsCreateManySkillInput>
    skipDuplicates?: boolean
  }

  export type EmployeeSkillsCreateWithoutSkillInput = {
    value?: number | null
    employee: EmployeeCreateNestedOneWithoutSkillsInput
  }

  export type EmployeeSkillsUncheckedCreateWithoutSkillInput = {
    employeeId: number
    value?: number | null
  }

  export type EmployeeSkillsCreateOrConnectWithoutSkillInput = {
    where: EmployeeSkillsWhereUniqueInput
    create: XOR<EmployeeSkillsCreateWithoutSkillInput, EmployeeSkillsUncheckedCreateWithoutSkillInput>
  }

  export type EmployeeSkillsCreateManySkillInputEnvelope = {
    data: Enumerable<EmployeeSkillsCreateManySkillInput>
    skipDuplicates?: boolean
  }

  export type CandidateSkillsUpsertWithWhereUniqueWithoutSkillInput = {
    where: CandidateSkillsWhereUniqueInput
    update: XOR<CandidateSkillsUpdateWithoutSkillInput, CandidateSkillsUncheckedUpdateWithoutSkillInput>
    create: XOR<CandidateSkillsCreateWithoutSkillInput, CandidateSkillsUncheckedCreateWithoutSkillInput>
  }

  export type CandidateSkillsUpdateWithWhereUniqueWithoutSkillInput = {
    where: CandidateSkillsWhereUniqueInput
    data: XOR<CandidateSkillsUpdateWithoutSkillInput, CandidateSkillsUncheckedUpdateWithoutSkillInput>
  }

  export type CandidateSkillsUpdateManyWithWhereWithoutSkillInput = {
    where: CandidateSkillsScalarWhereInput
    data: XOR<CandidateSkillsUpdateManyMutationInput, CandidateSkillsUncheckedUpdateManyWithoutCandidatesInput>
  }

  export type EmployeeSkillsUpsertWithWhereUniqueWithoutSkillInput = {
    where: EmployeeSkillsWhereUniqueInput
    update: XOR<EmployeeSkillsUpdateWithoutSkillInput, EmployeeSkillsUncheckedUpdateWithoutSkillInput>
    create: XOR<EmployeeSkillsCreateWithoutSkillInput, EmployeeSkillsUncheckedCreateWithoutSkillInput>
  }

  export type EmployeeSkillsUpdateWithWhereUniqueWithoutSkillInput = {
    where: EmployeeSkillsWhereUniqueInput
    data: XOR<EmployeeSkillsUpdateWithoutSkillInput, EmployeeSkillsUncheckedUpdateWithoutSkillInput>
  }

  export type EmployeeSkillsUpdateManyWithWhereWithoutSkillInput = {
    where: EmployeeSkillsScalarWhereInput
    data: XOR<EmployeeSkillsUpdateManyMutationInput, EmployeeSkillsUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeCreateWithoutJobsInput = {
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    skills?: EmployeeSkillsCreateNestedManyWithoutEmployeeInput
    interviews?: InterviewRoundCreateNestedManyWithoutInterviewerInput
  }

  export type EmployeeUncheckedCreateWithoutJobsInput = {
    id?: number
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    skills?: EmployeeSkillsUncheckedCreateNestedManyWithoutEmployeeInput
    interviews?: InterviewRoundUncheckedCreateNestedManyWithoutInterviewerInput
  }

  export type EmployeeCreateOrConnectWithoutJobsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutJobsInput, EmployeeUncheckedCreateWithoutJobsInput>
  }

  export type CandidateForJobsCreateWithoutJobInput = {
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
    candidate: CandidateCreateNestedOneWithoutAppliedAtInput
  }

  export type CandidateForJobsUncheckedCreateWithoutJobInput = {
    candidateId: number
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
  }

  export type CandidateForJobsCreateOrConnectWithoutJobInput = {
    where: CandidateForJobsWhereUniqueInput
    create: XOR<CandidateForJobsCreateWithoutJobInput, CandidateForJobsUncheckedCreateWithoutJobInput>
  }

  export type CandidateForJobsCreateManyJobInputEnvelope = {
    data: Enumerable<CandidateForJobsCreateManyJobInput>
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutJobsInput = {
    update: XOR<EmployeeUpdateWithoutJobsInput, EmployeeUncheckedUpdateWithoutJobsInput>
    create: XOR<EmployeeCreateWithoutJobsInput, EmployeeUncheckedCreateWithoutJobsInput>
  }

  export type EmployeeUpdateWithoutJobsInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: EmployeeSkillsUpdateManyWithoutEmployeeInput
    interviews?: InterviewRoundUpdateManyWithoutInterviewerInput
  }

  export type EmployeeUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: EmployeeSkillsUncheckedUpdateManyWithoutEmployeeInput
    interviews?: InterviewRoundUncheckedUpdateManyWithoutInterviewerInput
  }

  export type CandidateForJobsUpsertWithWhereUniqueWithoutJobInput = {
    where: CandidateForJobsWhereUniqueInput
    update: XOR<CandidateForJobsUpdateWithoutJobInput, CandidateForJobsUncheckedUpdateWithoutJobInput>
    create: XOR<CandidateForJobsCreateWithoutJobInput, CandidateForJobsUncheckedCreateWithoutJobInput>
  }

  export type CandidateForJobsUpdateWithWhereUniqueWithoutJobInput = {
    where: CandidateForJobsWhereUniqueInput
    data: XOR<CandidateForJobsUpdateWithoutJobInput, CandidateForJobsUncheckedUpdateWithoutJobInput>
  }

  export type CandidateForJobsUpdateManyWithWhereWithoutJobInput = {
    where: CandidateForJobsScalarWhereInput
    data: XOR<CandidateForJobsUpdateManyMutationInput, CandidateForJobsUncheckedUpdateManyWithoutAppliedByInput>
  }

  export type EmployeeCreateWithoutInterviewsInput = {
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    jobs?: JobCreateNestedManyWithoutEmployeeInput
    skills?: EmployeeSkillsCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutInterviewsInput = {
    id?: number
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    jobs?: JobUncheckedCreateNestedManyWithoutEmployeeInput
    skills?: EmployeeSkillsUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutInterviewsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutInterviewsInput, EmployeeUncheckedCreateWithoutInterviewsInput>
  }

  export type CandidateCreateWithoutInterviewInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsCreateNestedManyWithoutCandidateInput
    skills?: CandidateSkillsCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutInterviewInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsUncheckedCreateNestedManyWithoutCandidateInput
    skills?: CandidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutInterviewInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutInterviewInput, CandidateUncheckedCreateWithoutInterviewInput>
  }

  export type EmployeeUpsertWithoutInterviewsInput = {
    update: XOR<EmployeeUpdateWithoutInterviewsInput, EmployeeUncheckedUpdateWithoutInterviewsInput>
    create: XOR<EmployeeCreateWithoutInterviewsInput, EmployeeUncheckedCreateWithoutInterviewsInput>
  }

  export type EmployeeUpdateWithoutInterviewsInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    jobs?: JobUpdateManyWithoutEmployeeInput
    skills?: EmployeeSkillsUpdateManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedUpdateWithoutInterviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    jobs?: JobUncheckedUpdateManyWithoutEmployeeInput
    skills?: EmployeeSkillsUncheckedUpdateManyWithoutEmployeeInput
  }

  export type CandidateUpsertWithoutInterviewInput = {
    update: XOR<CandidateUpdateWithoutInterviewInput, CandidateUncheckedUpdateWithoutInterviewInput>
    create: XOR<CandidateCreateWithoutInterviewInput, CandidateUncheckedCreateWithoutInterviewInput>
  }

  export type CandidateUpdateWithoutInterviewInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUpdateManyWithoutCandidateInput
    skills?: CandidateSkillsUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUncheckedUpdateManyWithoutCandidateInput
    skills?: CandidateSkillsUncheckedUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedUpdateManyWithoutCandidateInput
  }

  export type CandidateCreateWithoutSkillsInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutSkillsInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsUncheckedCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutSkillsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutSkillsInput, CandidateUncheckedCreateWithoutSkillsInput>
  }

  export type SkillsCreateWithoutCandidatesInput = {
    name: string
    employee?: EmployeeSkillsCreateNestedManyWithoutSkillInput
  }

  export type SkillsUncheckedCreateWithoutCandidatesInput = {
    id?: number
    name: string
    employee?: EmployeeSkillsUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillsCreateOrConnectWithoutCandidatesInput = {
    where: SkillsWhereUniqueInput
    create: XOR<SkillsCreateWithoutCandidatesInput, SkillsUncheckedCreateWithoutCandidatesInput>
  }

  export type CandidateUpsertWithoutSkillsInput = {
    update: XOR<CandidateUpdateWithoutSkillsInput, CandidateUncheckedUpdateWithoutSkillsInput>
    create: XOR<CandidateCreateWithoutSkillsInput, CandidateUncheckedCreateWithoutSkillsInput>
  }

  export type CandidateUpdateWithoutSkillsInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUncheckedUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedUpdateManyWithoutCandidateInput
  }

  export type SkillsUpsertWithoutCandidatesInput = {
    update: XOR<SkillsUpdateWithoutCandidatesInput, SkillsUncheckedUpdateWithoutCandidatesInput>
    create: XOR<SkillsCreateWithoutCandidatesInput, SkillsUncheckedCreateWithoutCandidatesInput>
  }

  export type SkillsUpdateWithoutCandidatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeSkillsUpdateManyWithoutSkillInput
  }

  export type SkillsUncheckedUpdateWithoutCandidatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeSkillsUncheckedUpdateManyWithoutSkillInput
  }

  export type EmployeeCreateWithoutSkillsInput = {
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    jobs?: JobCreateNestedManyWithoutEmployeeInput
    interviews?: InterviewRoundCreateNestedManyWithoutInterviewerInput
  }

  export type EmployeeUncheckedCreateWithoutSkillsInput = {
    id?: number
    password: string
    email: string
    name: string
    phone?: bigint | number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    empType: string
    jobType?: string | null
    experience?: number | null
    designation?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    jobs?: JobUncheckedCreateNestedManyWithoutEmployeeInput
    interviews?: InterviewRoundUncheckedCreateNestedManyWithoutInterviewerInput
  }

  export type EmployeeCreateOrConnectWithoutSkillsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSkillsInput, EmployeeUncheckedCreateWithoutSkillsInput>
  }

  export type SkillsCreateWithoutEmployeeInput = {
    name: string
    candidates?: CandidateSkillsCreateNestedManyWithoutSkillInput
  }

  export type SkillsUncheckedCreateWithoutEmployeeInput = {
    id?: number
    name: string
    candidates?: CandidateSkillsUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillsCreateOrConnectWithoutEmployeeInput = {
    where: SkillsWhereUniqueInput
    create: XOR<SkillsCreateWithoutEmployeeInput, SkillsUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeUpsertWithoutSkillsInput = {
    update: XOR<EmployeeUpdateWithoutSkillsInput, EmployeeUncheckedUpdateWithoutSkillsInput>
    create: XOR<EmployeeCreateWithoutSkillsInput, EmployeeUncheckedCreateWithoutSkillsInput>
  }

  export type EmployeeUpdateWithoutSkillsInput = {
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    jobs?: JobUpdateManyWithoutEmployeeInput
    interviews?: InterviewRoundUpdateManyWithoutInterviewerInput
  }

  export type EmployeeUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empType?: StringFieldUpdateOperationsInput | string
    jobType?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    jobs?: JobUncheckedUpdateManyWithoutEmployeeInput
    interviews?: InterviewRoundUncheckedUpdateManyWithoutInterviewerInput
  }

  export type SkillsUpsertWithoutEmployeeInput = {
    update: XOR<SkillsUpdateWithoutEmployeeInput, SkillsUncheckedUpdateWithoutEmployeeInput>
    create: XOR<SkillsCreateWithoutEmployeeInput, SkillsUncheckedCreateWithoutEmployeeInput>
  }

  export type SkillsUpdateWithoutEmployeeInput = {
    name?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateSkillsUpdateManyWithoutSkillInput
  }

  export type SkillsUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateSkillsUncheckedUpdateManyWithoutSkillInput
  }

  export type CandidateCreateWithoutSocialsInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsCreateNestedManyWithoutCandidateInput
    skills?: CandidateSkillsCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutSocialsInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    appliedAt?: CandidateForJobsUncheckedCreateNestedManyWithoutCandidateInput
    skills?: CandidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutSocialsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutSocialsInput, CandidateUncheckedCreateWithoutSocialsInput>
  }

  export type CandidateUpsertWithoutSocialsInput = {
    update: XOR<CandidateUpdateWithoutSocialsInput, CandidateUncheckedUpdateWithoutSocialsInput>
    create: XOR<CandidateCreateWithoutSocialsInput, CandidateUncheckedCreateWithoutSocialsInput>
  }

  export type CandidateUpdateWithoutSocialsInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUpdateManyWithoutCandidateInput
    skills?: CandidateSkillsUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutSocialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: CandidateForJobsUncheckedUpdateManyWithoutCandidateInput
    skills?: CandidateSkillsUncheckedUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedUpdateManyWithoutCandidateInput
  }

  export type CandidateCreateWithoutAppliedAtInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    skills?: CandidateSkillsCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutAppliedAtInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city?: string | null
    country?: string | null
    phone?: bigint | number | null
    name: string
    social?: string | null
    profilePicture?: string | null
    profilePicKey?: string | null
    resume?: string | null
    resumeKey?: string | null
    source?: string | null
    currJobTitle?: string | null
    qualification?: string | null
    expectedSalary?: number | null
    expectedSalaryUnit?: string | null
    currentSalary?: number | null
    currentSalaryUnit?: string | null
    experience?: number | null
    info?: string | null
    website?: string | null
    skills?: CandidateSkillsUncheckedCreateNestedManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedCreateNestedManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutAppliedAtInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutAppliedAtInput, CandidateUncheckedCreateWithoutAppliedAtInput>
  }

  export type JobCreateWithoutAppliedByInput = {
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
    employee: EmployeeCreateNestedOneWithoutJobsInput
  }

  export type JobUncheckedCreateWithoutAppliedByInput = {
    id?: number
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    assignedTo: number
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
  }

  export type JobCreateOrConnectWithoutAppliedByInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutAppliedByInput, JobUncheckedCreateWithoutAppliedByInput>
  }

  export type CandidateUpsertWithoutAppliedAtInput = {
    update: XOR<CandidateUpdateWithoutAppliedAtInput, CandidateUncheckedUpdateWithoutAppliedAtInput>
    create: XOR<CandidateCreateWithoutAppliedAtInput, CandidateUncheckedCreateWithoutAppliedAtInput>
  }

  export type CandidateUpdateWithoutAppliedAtInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: CandidateSkillsUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUpdateManyWithoutCandidateInput
  }

  export type CandidateUncheckedUpdateWithoutAppliedAtInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: StringFieldUpdateOperationsInput | string
    social?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicKey?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    resumeKey?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    currJobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    qualification?: NullableStringFieldUpdateOperationsInput | string | null
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    expectedSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    currentSalary?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalaryUnit?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: CandidateSkillsUncheckedUpdateManyWithoutCandidateInput
    socials?: CandidateSocialUncheckedUpdateManyWithoutCandidateInput
    interview?: InterviewRoundUncheckedUpdateManyWithoutCandidateInput
  }

  export type JobUpsertWithoutAppliedByInput = {
    update: XOR<JobUpdateWithoutAppliedByInput, JobUncheckedUpdateWithoutAppliedByInput>
    create: XOR<JobCreateWithoutAppliedByInput, JobUncheckedCreateWithoutAppliedByInput>
  }

  export type JobUpdateWithoutAppliedByInput = {
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
    employee?: EmployeeUpdateOneRequiredWithoutJobsInput
  }

  export type JobUncheckedUpdateWithoutAppliedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
  }

  export type JobCreateManyEmployeeInput = {
    id?: number
    title: string
    experienceStartRng: number
    experienceEndRng: number
    salaryStartRng: number
    salaryEndRng: number
    createdAt?: Date | string
    closedAt?: Date | string | null
    status?: string
    description: string
    opening: number
    filled?: number
    active?: number
    contacting?: number
    archived?: number
    department: string
    jobReq?: JobCreatejobReqInput | Enumerable<string>
    jobRes?: JobCreatejobResInput | Enumerable<string>
    city: string
    keywords?: JobCreatekeywordsInput | Enumerable<string>
    type?: JobCreatetypeInput | Enumerable<string>
  }

  export type EmployeeSkillsCreateManyEmployeeInput = {
    skillId: number
    value?: number | null
  }

  export type InterviewRoundCreateManyInterviewerInput = {
    id?: number
    title: string
    candidateId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
  }

  export type JobUpdateWithoutEmployeeInput = {
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
    appliedBy?: CandidateForJobsUpdateManyWithoutJobInput
  }

  export type JobUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
    appliedBy?: CandidateForJobsUncheckedUpdateManyWithoutJobInput
  }

  export type JobUncheckedUpdateManyWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    experienceStartRng?: IntFieldUpdateOperationsInput | number
    experienceEndRng?: IntFieldUpdateOperationsInput | number
    salaryStartRng?: IntFieldUpdateOperationsInput | number
    salaryEndRng?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    opening?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    active?: IntFieldUpdateOperationsInput | number
    contacting?: IntFieldUpdateOperationsInput | number
    archived?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    jobReq?: JobUpdatejobReqInput | Enumerable<string>
    jobRes?: JobUpdatejobResInput | Enumerable<string>
    city?: StringFieldUpdateOperationsInput | string
    keywords?: JobUpdatekeywordsInput | Enumerable<string>
    type?: JobUpdatetypeInput | Enumerable<string>
  }

  export type EmployeeSkillsUpdateWithoutEmployeeInput = {
    value?: NullableIntFieldUpdateOperationsInput | number | null
    skill?: SkillsUpdateOneRequiredWithoutEmployeeInput
  }

  export type EmployeeSkillsUncheckedUpdateWithoutEmployeeInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeeSkillsUncheckedUpdateManyWithoutSkillsInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InterviewRoundUpdateWithoutInterviewerInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutInterviewInput
  }

  export type InterviewRoundUncheckedUpdateWithoutInterviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    candidateId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewRoundUncheckedUpdateManyWithoutInterviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    candidateId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateForJobsCreateManyCandidateInput = {
    jobId: number
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
  }

  export type CandidateSkillsCreateManyCandidateInput = {
    skillId: number
    value: number
  }

  export type CandidateSocialCreateManyCandidateInput = {
    id?: number
    name: string
    url: string
  }

  export type InterviewRoundCreateManyCandidateInput = {
    id?: number
    title: string
    interviewerId: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    url: string
    feedback?: string | null
  }

  export type CandidateForJobsUpdateWithoutCandidateInput = {
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutAppliedByInput
  }

  export type CandidateForJobsUncheckedUpdateWithoutCandidateInput = {
    jobId?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateForJobsUncheckedUpdateManyWithoutAppliedAtInput = {
    jobId?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateSkillsUpdateWithoutCandidateInput = {
    value?: IntFieldUpdateOperationsInput | number
    skill?: SkillsUpdateOneRequiredWithoutCandidatesInput
  }

  export type CandidateSkillsUncheckedUpdateWithoutCandidateInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateSkillsUncheckedUpdateManyWithoutSkillsInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateSocialUpdateWithoutCandidateInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateSocialUncheckedUpdateWithoutCandidateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateSocialUncheckedUpdateManyWithoutSocialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type InterviewRoundUpdateWithoutCandidateInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    interviewer?: EmployeeUpdateOneRequiredWithoutInterviewsInput
  }

  export type InterviewRoundUncheckedUpdateWithoutCandidateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    interviewerId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewRoundUncheckedUpdateManyWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    interviewerId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateSkillsCreateManySkillInput = {
    candidateId: number
    value: number
  }

  export type EmployeeSkillsCreateManySkillInput = {
    employeeId: number
    value?: number | null
  }

  export type CandidateSkillsUpdateWithoutSkillInput = {
    value?: IntFieldUpdateOperationsInput | number
    candidate?: CandidateUpdateOneRequiredWithoutSkillsInput
  }

  export type CandidateSkillsUncheckedUpdateWithoutSkillInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateSkillsUncheckedUpdateManyWithoutCandidatesInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeSkillsUpdateWithoutSkillInput = {
    value?: NullableIntFieldUpdateOperationsInput | number | null
    employee?: EmployeeUpdateOneRequiredWithoutSkillsInput
  }

  export type EmployeeSkillsUncheckedUpdateWithoutSkillInput = {
    employeeId?: IntFieldUpdateOperationsInput | number
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CandidateForJobsCreateManyJobInput = {
    candidateId: number
    stage?: string
    preOnboarding?: string | null
    dateApplied?: Date | string
  }

  export type CandidateForJobsUpdateWithoutJobInput = {
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutAppliedAtInput
  }

  export type CandidateForJobsUncheckedUpdateWithoutJobInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateForJobsUncheckedUpdateManyWithoutAppliedByInput = {
    candidateId?: IntFieldUpdateOperationsInput | number
    stage?: StringFieldUpdateOperationsInput | string
    preOnboarding?: NullableStringFieldUpdateOperationsInput | string | null
    dateApplied?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}